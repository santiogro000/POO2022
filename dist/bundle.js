!function(t){var n={};function e(o){if(n[o])return n[o].exports;var i=n[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(o,i,function(n){return t[n]}.bind(null,i));return o},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";var o;e.r(n),function(t){t[t.NORTH=0]="NORTH",t[t.NORTH_EAST=1]="NORTH_EAST",t[t.EAST=2]="EAST",t[t.SOUTH_EAST=3]="SOUTH_EAST",t[t.SOUTH=4]="SOUTH",t[t.SOUTH_WEST=5]="SOUTH_WEST",t[t.WEST=6]="WEST",t[t.NORTH_WEST=7]="NORTH_WEST"}(o||(o={}));var i,r=function(){function t(t,n){this.owner=t,this.cardinal=n}return t.prototype.paint=function(n){n.fillStyle=c.color;var e=0,i=0;switch(this.cardinal){case o.SOUTH:e=this.owner.x+this.owner.w/2,i=this.owner.y+this.owner.h}n.fillRect(e-t.HSIZE,i-t.HSIZE,2*t.HSIZE,2*t.HSIZE)},t.HSIZE=4,t}(),s=function(){function t(){}return t.colorAsString=function(t){return"rgba("+t.r+","+t.g+","+t.b+","+t.a/255+")"},t}(),c=function(){function t(t,n){this.position=t,this.size=n,this.ctrlPoints=[],this.addControlPoints()}return t.prototype.paint=function(n){n.strokeStyle=t.color,n.beginPath(),n.rect(this.position.x,this.position.y,this.size.w,this.size.h),n.stroke(),this.ctrlPoints.forEach((function(t){return t.paint(n)}))},Object.defineProperty(t.prototype,"x",{get:function(){return this.position.x},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.position.y},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"w",{get:function(){return this.size.w},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"h",{get:function(){return this.size.h},enumerable:!1,configurable:!0}),t.prototype.select=function(t,n){return n?this.contained(t,n):this.contains(t)},t.prototype.addControlPoints=function(){var t=this;Object.keys(o).map((function(n){var e=Number(n);isNaN(e)||t.ctrlPoints.push(new r(t,e))}))},t.prototype.contains=function(t){var n=this.x,e=this.x+this.w,o=this.y,i=this.y+this.h;return n<t.clientX&&t.clientX<e&&o<t.clientY&&t.clientY<i},t.prototype.contained=function(t,n){return!1},t.color=s.colorAsString({r:28,g:116,b:232,a:255}),t}(),u=function(){function t(t,n){this.bbox=t,this.color=n,this._selected=!1}return Object.defineProperty(t.prototype,"selected",{get:function(){return this._selected},set:function(t){this._selected=t},enumerable:!1,configurable:!0}),t.prototype.paint=function(t){this.doPaint(t),this.selected&&this.bbox.paint(t)},t.prototype.select=function(t,n){this.selected=this.bbox.select(t,n)},t}(),p=(i=function(t,n){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}i(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),h=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return p(n,t),n}(u),f=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),a=function(t){function n(n,e){return t.call(this,n,e)||this}return f(n,t),n.prototype.doPaint=function(t){t.strokeStyle=s.colorAsString(this.color),t.beginPath(),t.moveTo(this.bbox.x,this.bbox.y),t.lineTo(this.bbox.x+this.bbox.w,this.bbox.y+this.bbox.h),t.stroke()},n}(h),l=function(){function t(){this.figures=[],this.modified=!1,this.name=null}return t.prototype.paint=function(t){this.figures.forEach((function(n){return n.paint(t)}))},t.prototype.addTestFigures=function(){var t=new a(new c({x:100,y:100},{w:400,h:100}),{r:255,g:0,b:0,a:255});this.figures.push(t);var n=new a(new c({x:100,y:100},{w:400,h:200}),{r:0,g:255,b:0,a:255});this.figures.push(n);var e=new a(new c({x:100,y:100},{w:400,h:300}),{r:0,g:0,b:0,a:255});this.figures.push(e)},t.prototype.selectAll=function(){this.figures.forEach((function(t){return t.selected=!0}))},t.prototype.select=function(t,n){this.figures.forEach((function(e){return e.select(t,n)})),g.repaint()},t}(),y=function(){function t(){}return t.prototype.onMouseDown=function(t){this.evDown=t},t.prototype.onMouseUp=function(t){this.evUp=t,this.processMouseUp()},t.prototype.equal=function(t,n){return t.clientX===n.clientX&&t.clientY===n.clientY},t}(),d=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),b=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return d(n,t),n.prototype.processMouseUp=function(){this.equal(this.evDown,this.evUp)?g.select(this.evUp):g.select(this.evDown,this.evUp)},n}(y),E=function(){function t(){this.canvas=new w}return t.prototype.init=function(){this.canvas.init()},t.prototype.repaint=function(){this.canvas.repaint()},t}(),w=function(){function t(){this.tools=[],this.htmlElement=document.createElement("canvas"),document.body.appendChild(this.htmlElement),this.htmlElement.width=t.PAGE_WIDTH,this.htmlElement.height=t.PAGE_HEIGHT,this.htmlElement.style.backgroundColor="#FAFAFA",this.ctx=this.htmlElement.getContext("2d")}return t.prototype.init=function(){this.buildTools(),this.setActiveTool(t.SELECTION),window.addEventListener("mousedown",this.handleMouseDown.bind(this)),window.addEventListener("mouseup",this.handleMouseUp.bind(this))},t.prototype.setActiveTool=function(t){this.activeTool=this.tools[t]},t.prototype.getContext=function(){return this.ctx},Object.defineProperty(t.prototype,"width",{get:function(){return this.htmlElement.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.htmlElement.height},enumerable:!1,configurable:!0}),t.prototype.repaint=function(){this.drawGrid(this.ctx),_.getInstance().paint(this.ctx)},t.prototype.clear=function(t){t.fillStyle="#FAFAFA",t.fillRect(0,0,this.width,this.height)},t.prototype.drawGrid=function(n){if(n){this.clear(n),n.lineWidth=1,n.strokeStyle=t.GRID_COLOR;for(var e=this.width/t.GRID_SIZE,o=this.height/t.GRID_SIZE,i=1;i<e;i++)n.beginPath(),n.moveTo(i*t.GRID_SIZE,0),n.lineTo(i*t.GRID_SIZE,t.PAGE_HEIGHT),n.stroke();for(var r=1;r<o;r++)n.beginPath(),n.moveTo(0,r*t.GRID_SIZE),n.lineTo(t.PAGE_WIDTH,r*t.GRID_SIZE),n.stroke()}},t.prototype.buildTools=function(){this.tools[t.SELECTION]=new b},t.prototype.handleMouseDown=function(t){this.activeTool.onMouseDown(t)},t.prototype.handleMouseUp=function(t){this.activeTool.onMouseUp(t)},t.LINE_CREATION=0,t.RECT_CREATION=1,t.ELLI_CREATION=2,t.TEXT_CREATION=3,t.SELECTION=4,t.PAGE_WIDTH=2e3,t.PAGE_HEIGHT=2e3,t.GRID_SIZE=100,t.GRID_COLOR="#DDD0DD",t}(),_=function(){function t(){this.drawing=new l,this.mainWindow=new E,document.title="Graphics Editor v0.6"}return t.getInstance=function(){return t.instance||(t.instance=new t),t.instance},t.prototype.run=function(){this.drawing.addTestFigures(),this.mainWindow.init(),this.repaint()},t.prototype.repaint=function(){this.mainWindow.repaint()},t.prototype.paint=function(t){this.drawing.paint(t)},t.prototype.select=function(t,n){this.drawing.select(t,n)},t}(),T=_.getInstance();T.run();var g=n.default=T}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,