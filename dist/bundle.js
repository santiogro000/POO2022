!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var o;n.r(e),function(t){t[t.NORTH=0]="NORTH",t[t.NORTH_EAST=1]="NORTH_EAST",t[t.EAST=2]="EAST",t[t.SOUTH_EAST=3]="SOUTH_EAST",t[t.SOUTH=4]="SOUTH",t[t.SOUTH_WEST=5]="SOUTH_WEST",t[t.WEST=6]="WEST",t[t.NORTH_WEST=7]="NORTH_WEST"}(o||(o={}));var i,r=function(){function t(t,e){this.owner=t,this.cardinal=e}return t.prototype.paint=function(e){e.fillStyle=c.color;var n=0,i=0;switch(this.cardinal){case o.NORTH:n=this.owner.x+this.owner.w/2,i=this.owner.y;break;case o.NORTH_EAST:n=this.owner.x+this.owner.w,i=this.owner.y;break;case o.EAST:n=this.owner.x+this.owner.w,i=this.owner.y+this.owner.h/2;break;case o.SOUTH_EAST:n=this.owner.x+this.owner.w,i=this.owner.y+this.owner.h;break;case o.SOUTH:n=this.owner.x+this.owner.w/2,i=this.owner.y+this.owner.h;break;case o.SOUTH_WEST:n=this.owner.x,i=this.owner.y+this.owner.h;break;case o.WEST:n=this.owner.x,i=this.owner.y+this.owner.h/2;break;case o.NORTH_WEST:n=this.owner.x,i=this.owner.y}e.fillRect(n-t.HSIZE,i-t.HSIZE,2*t.HSIZE,2*t.HSIZE)},t.HSIZE=4,t}(),s=function(){function t(){}return t.colorAsString=function(t){return"rgba("+t.r+","+t.g+","+t.b+","+t.a/255+")"},t}(),c=function(){function t(t,e){this.position=t,this.size=e,this.ctrlPoints=[],this.addControlPoints()}return t.prototype.paint=function(e){e.save(),e.setLineDash([5,5]),e.strokeStyle=t.color,e.beginPath(),e.rect(this.position.x,this.position.y,this.size.w,this.size.h),e.stroke(),e.restore(),this.ctrlPoints.forEach((function(t){return t.paint(e)}))},Object.defineProperty(t.prototype,"x",{get:function(){return this.position.x},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.position.y},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"w",{get:function(){return this.size.w},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"h",{get:function(){return this.size.h},enumerable:!1,configurable:!0}),t.prototype.select=function(t,e){return e?this.contained(t,e):this.contains(t)},t.prototype.addControlPoints=function(){var t=this;Object.keys(o).map((function(e){var n=Number(e);isNaN(n)||t.ctrlPoints.push(new r(t,n))}))},t.prototype.contains=function(t){var e=this.x,n=this.x+this.w,o=this.y,i=this.y+this.h;return e<t.clientX&&t.clientX<n&&o<t.clientY&&t.clientY<i},t.prototype.contained=function(t,e){return!1},t.color=s.colorAsString({r:28,g:116,b:232,a:255}),t}(),u=function(){function t(t,e){this.bbox=t,this.color=e,this._selected=!1}return Object.defineProperty(t.prototype,"selected",{get:function(){return this._selected},set:function(t){this._selected=t},enumerable:!1,configurable:!0}),t.prototype.paint=function(t){t.save(),t.strokeStyle=s.colorAsString(this.color),this.doPaint(t),t.restore(),this.selected&&this.bbox.paint(t)},t.prototype.select=function(t,e){this.selected=this.bbox.select(t,e)},t}(),h=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),p=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._linewidth=49,e}return h(e,t),e.prototype.doLineStyle=function(t){t.lineWidth=this.linewidth,t.setLineDash([this.dashStroke,this.dashSpace])},Object.defineProperty(e.prototype,"linewidth",{get:function(){return this._linewidth},set:function(t){this._linewidth=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"dashStroke",{get:function(){return this._dashStroke},set:function(t){this._dashStroke=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"dashSpace",{get:function(){return this._dashSpace},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"dash",{set:function(t){this._dashSpace=t},enumerable:!1,configurable:!0}),e}(u),a=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e.prototype.doFill=function(t){t.fillStyle=t.strokeStyle,t.fill()},e}(p),f=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.prototype.doPaint=function(t){t.beginPath(),t.moveTo(this.bbox.x,this.bbox.y+this.bbox.h),t.lineTo(this.bbox.x+this.bbox.w/2,this.bbox.y),t.lineTo(this.bbox.x+this.bbox.w,this.bbox.y+this.bbox.h),t.lineTo(this.bbox.x,this.bbox.y+this.bbox.h),t.closePath(),t.fillStyle=t.strokeStyle,t.fill()},e}(l),b=function(){function t(){this.figures=[],this.modified=!1,this.name=null}return t.prototype.paint=function(t){this.figures.forEach((function(e){return e.paint(t)}))},t.prototype.addTestFigures=function(){var t=new y(new c({x:100,y:100},{w:400,h:100}),{r:255,g:0,b:0,a:255});this.figures.push(t);var e=new y(new c({x:100,y:100},{w:400,h:200}),{r:0,g:255,b:0,a:255});this.figures.push(e);var n=new y(new c({x:100,y:100},{w:400,h:300}),{r:0,g:0,b:0,a:255});this.figures.push(n)},t.prototype.select=function(t,e){this.figures.forEach((function(n){return n.select(t,e)})),g.repaint()},t}(),d=function(){function t(){}return t.prototype.onMouseDown=function(t){this.evDown=t},t.prototype.onMouseUp=function(t){this.evUp=t,this.processMouseUp()},t.prototype.equal=function(t,e){return t.clientX===e.clientX&&t.clientY===e.clientY},t}(),w=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),_=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return w(e,t),e.prototype.processMouseUp=function(){this.equal(this.evDown,this.evUp)?g.select(this.evUp):g.select(this.evDown,this.evUp)},e}(d),T=function(){function t(){this.canvas=new E}return t.prototype.init=function(){this.canvas.init()},t.prototype.repaint=function(){this.canvas.repaint()},t}(),E=function(){function t(){this.tools=[],this.htmlElement=document.createElement("canvas"),document.body.appendChild(this.htmlElement),this.htmlElement.width=t.PAGE_WIDTH,this.htmlElement.height=t.PAGE_HEIGHT,this.htmlElement.style.backgroundColor="#FAFAFA",this.ctx=this.htmlElement.getContext("2d")}return t.prototype.init=function(){this.buildTools(),this.setActiveTool(t.SELECTION),window.addEventListener("mousedown",this.handleMouseDown.bind(this)),window.addEventListener("mouseup",this.handleMouseUp.bind(this))},t.prototype.setActiveTool=function(t){this.activeTool=this.tools[t]},t.prototype.getContext=function(){return this.ctx},Object.defineProperty(t.prototype,"width",{get:function(){return this.htmlElement.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.htmlElement.height},enumerable:!1,configurable:!0}),t.prototype.repaint=function(){this.drawGrid(this.ctx),S.getInstance().paint(this.ctx)},t.prototype.clear=function(t){t.fillStyle="#FAFAFA",t.fillRect(0,0,this.width,this.height)},t.prototype.drawGrid=function(e){if(e){this.clear(e),e.lineWidth=1,e.strokeStyle=t.GRID_COLOR;for(var n=this.width/t.GRID_SIZE,o=this.height/t.GRID_SIZE,i=1;i<n;i++)e.beginPath(),e.moveTo(i*t.GRID_SIZE,0),e.lineTo(i*t.GRID_SIZE,t.PAGE_HEIGHT),e.stroke();for(var r=1;r<o;r++)e.beginPath(),e.moveTo(0,r*t.GRID_SIZE),e.lineTo(t.PAGE_WIDTH,r*t.GRID_SIZE),e.stroke()}},t.prototype.buildTools=function(){this.tools[t.SELECTION]=new _},t.prototype.handleMouseDown=function(t){this.activeTool.onMouseDown(t)},t.prototype.handleMouseUp=function(t){this.activeTool.onMouseUp(t)},t.LINE_CREATION=0,t.RECT_CREATION=1,t.ELLI_CREATION=2,t.TEXT_CREATION=3,t.SELECTION=4,t.PAGE_WIDTH=2e3,t.PAGE_HEIGHT=2e3,t.GRID_SIZE=100,t.GRID_COLOR="#DDD0DD",t}(),S=function(){function t(){this.drawing=new b,this.mainWindow=new T,document.title="Graphics Editor v0.6"}return t.getInstance=function(){return t.instance||(t.instance=new t),t.instance},t.prototype.run=function(){this.drawing.addTestFigures(),this.mainWindow.init(),this.repaint()},t.prototype.repaint=function(){this.mainWindow.repaint()},t.prototype.paint=function(t){this.drawing.paint(t)},t.prototype.select=function(t,e){this.drawing.select(t,e)},t}(),O=S.getInstance();O.run();var g=e.default=O}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,