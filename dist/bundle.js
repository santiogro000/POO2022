!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var i=function(){function t(){this.figures=[],this.modified=!1,this.name=null}return t.prototype.paint=function(t){this.figures.forEach((function(e){return e.paint(t)}))},t}(),o=function(){function t(t,e){this.x=t,this.y=e,this.w=320,this.h=240}return t.prototype.paint=function(t){t.strokeStyle="red",t.beginPath(),t.rect(this.x,this.y,this.w,this.h),t.stroke()},t}(),r=function(){function t(t,e){this.x=t,this.y=e,this.w=320,this.h=240}return t.prototype.paint=function(t){t.strokeStyle="darkgreen",t.beginPath(),t.rect(this.x,this.y,this.w,this.h),t.stroke()},t.prototype.setPosition=function(t,e){this.x=t,this.y=e,this.repaint()},t.prototype.repaint=function(){var t=c.getInstance().getContext();this.paint(t)},t}(),s=function(){function t(){this.canvas=new u}return t.prototype.getContext=function(){return this.canvas.getContext()},t.prototype.windowTest=function(){this.canvas.windowTest()},t}(),u=function(){function t(){this.htmlElement=document.createElement("canvas"),document.body.appendChild(this.htmlElement),this.htmlElement.width=t.PAGE_WIDTH,this.htmlElement.height=t.PAGE_HEIGHT,this.htmlElement.style.backgroundColor="#FAFAFA",this.ctx=this.htmlElement.getContext("2d")}return t.prototype.windowTest=function(){var t=this;this.drawGrid(this.ctx);var e=new o(10,10);e.paint(this.ctx);var n=new r(10,260);n.paint(this.ctx),setTimeout((function(){t.drawGrid(t.ctx),e.paint(t.ctx),e.x=350,e.y=10,console.log("BAD => "+JSON.stringify(e)),n.setPosition(350,10),console.log("GOOD => "+JSON.stringify(n))}),5e3)},t.prototype.getContext=function(){return this.ctx},Object.defineProperty(t.prototype,"width",{get:function(){return this.htmlElement.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.htmlElement.height},enumerable:!1,configurable:!0}),t.prototype.clear=function(t){t.fillStyle="#FAFAFA",t.fillRect(0,0,this.width,this.height)},t.prototype.drawGrid=function(e){if(e){this.clear(e),e.lineWidth=1,e.strokeStyle=t.GRID_COLOR;for(var n=this.width/t.GRID_SIZE,i=this.height/t.GRID_SIZE,o=1;o<n;o++)e.beginPath(),e.moveTo(o*t.GRID_SIZE,0),e.lineTo(o*t.GRID_SIZE,t.PAGE_HEIGHT),e.stroke();for(var r=1;r<i;r++)e.beginPath(),e.moveTo(0,r*t.GRID_SIZE),e.lineTo(t.PAGE_WIDTH,r*t.GRID_SIZE),e.stroke()}},t.PAGE_WIDTH=2e3,t.PAGE_HEIGHT=2e3,t.GRID_SIZE=100,t.GRID_COLOR="#DDD0DD",t}(),c=function(){function t(){this.drawing=new i,this.mainWindow=new s,document.title="Graphics Editor v0.1"}return t.getInstance=function(){return t.instance||(t.instance=new t),t.instance},t.prototype.getContext=function(){return this.mainWindow.getContext()},t.prototype.run=function(){this.mainWindow.windowTest()},t}();c.getInstance().run()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,