!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var i,o=function(){function t(t,e,n){this.position=t,this.size=e,this.color=n,this._selected=!1}return Object.defineProperty(t.prototype,"selected",{get:function(){return this._selected},enumerable:!1,configurable:!0}),t.colorAsString=function(t){return"rgba("+t.r+","+t.g+","+t.b+","+t.a+")"},t}(),r=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),u=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return r(e,t),e.prototype.paint=function(t){t.strokeStyle=o.colorAsString(this.color),t.beginPath(),t.moveTo(this.position.x,this.position.y),t.lineTo(this.position.x+this.size.w,this.position.y+this.size.h),t.stroke()},e}(o),s=function(){function t(){this.figures=[],this.modified=!1,this.name=null}return t.prototype.paint=function(t){this.figures.forEach((function(e){return e.paint(t)}))},t.prototype.addTestFigures=function(){var t=new u({x:10,y:10},{w:300,h:100},{r:255,g:0,b:0,a:255});this.figures.push(t);var e=new u({x:10,y:10},{w:300,h:200},{r:0,g:255,b:0,a:255});this.figures.push(e);var n=new u({x:10,y:10},{w:300,h:300},{r:0,g:0,b:255,a:255});this.figures.push(n)},t}(),c=function(){function t(){this.canvas=new a}return t.prototype.getContext=function(){return this.canvas.getContext()},t.prototype.repaint=function(){this.canvas.repaint()},t}(),a=function(){function t(){this.htmlElement=document.createElement("canvas"),document.body.appendChild(this.htmlElement),this.htmlElement.width=t.PAGE_WIDTH,this.htmlElement.height=t.PAGE_HEIGHT,this.htmlElement.style.backgroundColor="#FAFAFA",this.ctx=this.htmlElement.getContext("2d")}return t.prototype.getContext=function(){return this.ctx},Object.defineProperty(t.prototype,"width",{get:function(){return this.htmlElement.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.htmlElement.height},enumerable:!1,configurable:!0}),t.prototype.repaint=function(){this.drawGrid(this.ctx),h.getInstance().paint(this.ctx)},t.prototype.clear=function(t){t.fillStyle="#FAFAFA",t.fillRect(0,0,this.width,this.height)},t.prototype.drawGrid=function(e){if(e){this.clear(e),e.lineWidth=1,e.strokeStyle=t.GRID_COLOR;for(var n=this.width/t.GRID_SIZE,i=this.height/t.GRID_SIZE,o=1;o<n;o++)e.beginPath(),e.moveTo(o*t.GRID_SIZE,0),e.lineTo(o*t.GRID_SIZE,t.PAGE_HEIGHT),e.stroke();for(var r=1;r<i;r++)e.beginPath(),e.moveTo(0,r*t.GRID_SIZE),e.lineTo(t.PAGE_WIDTH,r*t.GRID_SIZE),e.stroke()}},t.PAGE_WIDTH=2e3,t.PAGE_HEIGHT=2e3,t.GRID_SIZE=100,t.GRID_COLOR="#DDD0DD",t}(),h=function(){function t(){this.drawing=new s,this.mainWindow=new c,document.title="Graphics Editor v0.2"}return t.getInstance=function(){return t.instance||(t.instance=new t),t.instance},t.prototype.getContext=function(){return this.mainWindow.getContext()},t.prototype.run=function(){this.drawing.addTestFigures(),this.repaint()},t.prototype.repaint=function(){this.mainWindow.repaint()},t.prototype.paint=function(t){this.drawing.paint(t)},t}(),f=h.getInstance();f.run();e.default=f}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,