!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var o;n.r(e),function(t){t[t.NORTH=0]="NORTH",t[t.NORTH_EAST=1]="NORTH_EAST",t[t.EAST=2]="EAST",t[t.SOUTH_EAST=3]="SOUTH_EAST",t[t.SOUTH=4]="SOUTH",t[t.SOUTH_WEST=5]="SOUTH_WEST",t[t.WEST=6]="WEST",t[t.NORTH_WEST=7]="NORTH_WEST"}(o||(o={}));var i,r=function(){function t(t,e){this.owner=t,this.cardinal=e}return t.prototype.paint=function(e){e.fillStyle=c.color;var n=0,i=0;switch(this.cardinal){case o.NORTH:n=this.owner.x+this.owner.w/2,i=this.owner.y;break;case o.NORTH_EAST:n=this.owner.x+this.owner.w,i=this.owner.y;break;case o.EAST:n=this.owner.x+this.owner.w,i=this.owner.y+this.owner.h/2;break;case o.SOUTH_EAST:n=this.owner.x+this.owner.w,i=this.owner.y+this.owner.h;break;case o.SOUTH:n=this.owner.x+this.owner.w/2,i=this.owner.y+this.owner.h;break;case o.SOUTH_WEST:n=this.owner.x,i=this.owner.y+this.owner.h;break;case o.WEST:n=this.owner.x,i=this.owner.y+this.owner.h/2;break;case o.NORTH_WEST:n=this.owner.x,i=this.owner.y}e.fillRect(n-t.HSIZE,i-t.HSIZE,2*t.HSIZE,2*t.HSIZE)},t.HSIZE=4,t}(),s=function(){function t(){}return t.colorAsString=function(t){return"rgba("+t.r+","+t.g+","+t.b+","+t.a/255+")"},t}(),c=function(){function t(t,e){this.position=t,this.size=e,this.ctrlPoints=[],this.addControlPoints()}return t.prototype.paint=function(e){e.save(),e.setLineDash([5,5]),e.strokeStyle=t.color,e.beginPath(),e.rect(this.position.x,this.position.y,this.size.w,this.size.h),e.stroke(),e.restore(),this.ctrlPoints.forEach((function(t){return t.paint(e)}))},Object.defineProperty(t.prototype,"x",{get:function(){return this.position.x},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.position.y},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"w",{get:function(){return this.size.w},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"h",{get:function(){return this.size.h},enumerable:!1,configurable:!0}),t.prototype.select=function(t,e){return e?this.contained(t,e):this.contains(t)},t.prototype.addControlPoints=function(){var t=this;Object.keys(o).map((function(e){var n=Number(e);isNaN(n)||t.ctrlPoints.push(new r(t,n))}))},t.prototype.contains=function(t){var e=this.x,n=this.x+this.w,o=this.y,i=this.y+this.h;return e<t.clientX&&t.clientX<n&&o<t.clientY&&t.clientY<i},t.prototype.contained=function(t,e){return!1},t.color=s.colorAsString({r:28,g:116,b:232,a:255}),t}(),h=function(){function t(t,e){this.bbox=t,this.color=e,this._selected=!1}return Object.defineProperty(t.prototype,"selected",{get:function(){return this._selected},set:function(t){this._selected=t},enumerable:!1,configurable:!0}),t.prototype.paint=function(t){t.save(),t.strokeStyle=s.colorAsString(this.color),this.doPaint(t),t.restore(),this.selected&&this.bbox.paint(t)},t.prototype.select=function(t,e){this.selected=this.bbox.select(t,e)},t}(),u=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),a=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._linewidth=49,e}return u(e,t),e.prototype.doLineStyle=function(t){t.lineWidth=this.linewidth,t.setLineDash([this.dashStroke,this.dashSpace])},Object.defineProperty(e.prototype,"linewidth",{get:function(){return this._linewidth},set:function(t){this._linewidth=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"dashStroke",{get:function(){return this._dashStroke},set:function(t){this._dashStroke=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"dashSpace",{get:function(){return this._dashSpace},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"dash",{set:function(t){this._dashSpace=t},enumerable:!1,configurable:!0}),e}(h),p=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),f=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return p(e,t),e.prototype.doPaint=function(t){t.beginPath(),t.moveTo(this.bbox.x,this.bbox.y+this.bbox.h),t.lineTo(this.bbox.x+this.bbox.w/2,this.bbox.y),t.stroke(),t.beginPath(),t.moveTo(this.bbox.x+this.bbox.w/2,this.bbox.y),t.lineTo(this.bbox.x+this.bbox.w,this.bbox.y+this.bbox.h),t.stroke(),t.beginPath(),t.moveTo(this.bbox.x+this.bbox.w,this.bbox.y+this.bbox.h),t.lineTo(this.bbox.x,this.bbox.y+this.bbox.h),t.stroke()},e}(a),l=function(){function t(){this.figures=[],this.modified=!1,this.name=null}return t.prototype.paint=function(t){this.figures.forEach((function(e){return e.paint(t)}))},t.prototype.addTestFigures=function(){var t=new f(new c({x:100,y:100},{w:400,h:100}),{r:255,g:0,b:0,a:255});this.figures.push(t);var e=new f(new c({x:100,y:100},{w:400,h:200}),{r:0,g:255,b:0,a:255});this.figures.push(e);var n=new f(new c({x:100,y:100},{w:400,h:300}),{r:0,g:0,b:0,a:255});this.figures.push(n)},t.prototype.select=function(t,e){this.figures.forEach((function(n){return n.select(t,e)})),g.repaint()},t}(),b=function(){function t(){}return t.prototype.onMouseDown=function(t){this.evDown=t},t.prototype.onMouseUp=function(t){this.evUp=t,this.processMouseUp()},t.prototype.equal=function(t,e){return t.clientX===e.clientX&&t.clientY===e.clientY},t}(),y=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return y(e,t),e.prototype.processMouseUp=function(){this.equal(this.evDown,this.evUp)?g.select(this.evUp):g.select(this.evDown,this.evUp)},e}(b),w=function(){function t(){this.canvas=new T}return t.prototype.init=function(){this.canvas.init()},t.prototype.repaint=function(){this.canvas.repaint()},t}(),T=function(){function t(){this.tools=[],this.htmlElement=document.createElement("canvas"),document.body.appendChild(this.htmlElement),this.htmlElement.width=t.PAGE_WIDTH,this.htmlElement.height=t.PAGE_HEIGHT,this.htmlElement.style.backgroundColor="#FAFAFA",this.ctx=this.htmlElement.getContext("2d")}return t.prototype.init=function(){this.buildTools(),this.setActiveTool(t.SELECTION),window.addEventListener("mousedown",this.handleMouseDown.bind(this)),window.addEventListener("mouseup",this.handleMouseUp.bind(this))},t.prototype.setActiveTool=function(t){this.activeTool=this.tools[t]},t.prototype.getContext=function(){return this.ctx},Object.defineProperty(t.prototype,"width",{get:function(){return this.htmlElement.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.htmlElement.height},enumerable:!1,configurable:!0}),t.prototype.repaint=function(){this.drawGrid(this.ctx),_.getInstance().paint(this.ctx)},t.prototype.clear=function(t){t.fillStyle="#FAFAFA",t.fillRect(0,0,this.width,this.height)},t.prototype.drawGrid=function(e){if(e){this.clear(e),e.lineWidth=1,e.strokeStyle=t.GRID_COLOR;for(var n=this.width/t.GRID_SIZE,o=this.height/t.GRID_SIZE,i=1;i<n;i++)e.beginPath(),e.moveTo(i*t.GRID_SIZE,0),e.lineTo(i*t.GRID_SIZE,t.PAGE_HEIGHT),e.stroke();for(var r=1;r<o;r++)e.beginPath(),e.moveTo(0,r*t.GRID_SIZE),e.lineTo(t.PAGE_WIDTH,r*t.GRID_SIZE),e.stroke()}},t.prototype.buildTools=function(){this.tools[t.SELECTION]=new d},t.prototype.handleMouseDown=function(t){this.activeTool.onMouseDown(t)},t.prototype.handleMouseUp=function(t){this.activeTool.onMouseUp(t)},t.LINE_CREATION=0,t.RECT_CREATION=1,t.ELLI_CREATION=2,t.TEXT_CREATION=3,t.SELECTION=4,t.PAGE_WIDTH=2e3,t.PAGE_HEIGHT=2e3,t.GRID_SIZE=100,t.GRID_COLOR="#DDD0DD",t}(),_=function(){function t(){this.drawing=new l,this.mainWindow=new w,document.title="Graphics Editor v0.6"}return t.getInstance=function(){return t.instance||(t.instance=new t),t.instance},t.prototype.run=function(){this.drawing.addTestFigures(),this.mainWindow.init(),this.repaint()},t.prototype.repaint=function(){this.mainWindow.repaint()},t.prototype.paint=function(t){this.drawing.paint(t)},t.prototype.select=function(t,e){this.drawing.select(t,e)},t}(),E=_.getInstance();E.run();var g=e.default=E}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVsL2NvbnRyb2wtcG9pbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvY29sb3ItaGVscGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbC9ib3VuZC1ib3gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVsL2ZpZ3VyZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWwvZ2VvbWV0cmljLWZpZ3VyZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWwvdHJpYW5nbGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVsL2RyYXdpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvdG9vbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9zZWxlY3Rpb24tdG9vbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9tYWluLXdpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlci9hcHAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiQ2FyZGluYWwiLCJvd25lciIsImNhcmRpbmFsIiwicGFpbnQiLCJjdHgiLCJmaWxsU3R5bGUiLCJjb2xvciIsIngiLCJ5IiwidGhpcyIsIk5PUlRIIiwidyIsIk5PUlRIX0VBU1QiLCJFQVNUIiwiaCIsIlNPVVRIX0VBU1QiLCJTT1VUSCIsIlNPVVRIX1dFU1QiLCJXRVNUIiwiTk9SVEhfV0VTVCIsImZpbGxSZWN0IiwiQ29udHJvbFBvaW50IiwiSFNJWkUiLCJjb2xvckFzU3RyaW5nIiwiZyIsImIiLCJhIiwicG9zaXRpb24iLCJzaXplIiwiY3RybFBvaW50cyIsImFkZENvbnRyb2xQb2ludHMiLCJzYXZlIiwic2V0TGluZURhc2giLCJzdHJva2VTdHlsZSIsIkJvdW5kQm94IiwiYmVnaW5QYXRoIiwicmVjdCIsInN0cm9rZSIsInJlc3RvcmUiLCJmb3JFYWNoIiwiY3AiLCJzZWxlY3QiLCJldkRvd24iLCJldlVwIiwiY29udGFpbmVkIiwiY29udGFpbnMiLCJrZXlzIiwibWFwIiwiTnVtYmVyIiwiaXNOYU4iLCJwdXNoIiwiZXYiLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJjbGllbnRYIiwiY2xpZW50WSIsIkNvbG9ySGVscGVyIiwiYmJveCIsIl9zZWxlY3RlZCIsImRvUGFpbnQiLCJzZWxlY3RlZCIsIl9saW5ld2lkdGgiLCJkb0xpbmVTdHlsZSIsImxpbmVXaWR0aCIsImxpbmV3aWR0aCIsImRhc2hTdHJva2UiLCJkYXNoU3BhY2UiLCJfZGFzaFN0cm9rZSIsIl9kYXNoU3BhY2UiLCJtb3ZlVG8iLCJsaW5lVG8iLCJHZW9tZXRyaWNGaWd1cmUiLCJmaWd1cmVzIiwibW9kaWZpZWQiLCJmIiwiYWRkVGVzdEZpZ3VyZXMiLCJyZWRUcmlhbmdsZSIsIlRyaWFuZ2xlIiwiZ3JlZW5UcmlhbmdsZSIsImJsYWNrVHJpYW5nbGUiLCJyZXBhaW50Iiwib25Nb3VzZURvd24iLCJvbk1vdXNlVXAiLCJwcm9jZXNzTW91c2VVcCIsImVxdWFsIiwiZXYxIiwiZXYyIiwiVG9vbCIsImNhbnZhcyIsImluaXQiLCJ0b29scyIsImh0bWxFbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwid2lkdGgiLCJDYW52YXMiLCJQQUdFX1dJRFRIIiwiaGVpZ2h0IiwiUEFHRV9IRUlHSFQiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsImdldENvbnRleHQiLCJidWlsZFRvb2xzIiwic2V0QWN0aXZlVG9vbCIsIlNFTEVDVElPTiIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVNb3VzZURvd24iLCJoYW5kbGVNb3VzZVVwIiwiYWN0aXZlVG9vbCIsImRyYXdHcmlkIiwiZ2V0SW5zdGFuY2UiLCJjbGVhciIsIkdSSURfQ09MT1IiLCJudW1WZXJ0aWNhbHMiLCJHUklEX1NJWkUiLCJudW1Ib3Jpem9udGFscyIsInYiLCJMSU5FX0NSRUFUSU9OIiwiUkVDVF9DUkVBVElPTiIsIkVMTElfQ1JFQVRJT04iLCJURVhUX0NSRUFUSU9OIiwiZHJhd2luZyIsIm1haW5XaW5kb3ciLCJNYWluV2luZG93IiwidGl0bGUiLCJBcHAiLCJpbnN0YW5jZSIsInJ1biIsImFwcCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBC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bkgsRUFBSWlDLFdBTVIsWUFBQXFFLFdBQVIsV0FPSWpHLEtBQUttRixNQUFPTyxFQUFPUyxXQUFjLElBQUksR0FJakMsWUFBQUcsZ0JBQVIsU0FDSTVELEdBRUExQyxLQUFLd0csV0FDQTlCLFlBQ0doQyxJQUtKLFlBQUE2RCxjQUFSLFNBQ0k3RCxHQUVBMUMsS0FBS3dHLFdBQ0E3QixVQUNHakMsSUFqTEksRUFBQXVFLGNBQXdCLEVBQ3hCLEVBQUFDLGNBQXdCLEVBQ3hCLEVBQUFDLGNBQXdCLEVBQ3hCLEVBQUFDLGNBQXdCLEVBQ3hCLEVBQUFqQixVQUF3QixFQU94QixFQUFBUixXQUFxQixJQUNyQixFQUFBRSxZQUFzQixJQUV0QixFQUFBaUIsVUFBb0IsSUFDcEIsRUFBQUYsV0FBcUIsVUFxS3pDLEVBekxBLEdDekJBLGFBTUksYUFDSTVHLEtBQUtxSCxRQUFVLElBQUksRUFDbkJySCxLQUFLc0gsV0FBYSxJQUFJQyxFQUV0QmxDLFNBQVNtQyxNQUFRLHVCQW9EekIsT0FoRFcsRUFBQWQsWUFBUCxXQVFJLE9BUEtlLEVBQUlDLFdBSUxELEVBQUlDLFNBQVcsSUFBSUQsR0FHaEJBLEVBQUlDLFVBR2YsWUFBQUMsSUFBQSxXQUNJM0gsS0FBS3FILFFBQ0FqRCxpQkFFTHBFLEtBQUtzSCxXQUNBcEMsT0FFTGxGLEtBQUt5RSxXQUlULFlBQUFBLFFBQUEsV0FDSXpFLEtBQUtzSCxXQUNBN0MsV0FJVCxZQUFBL0UsTUFBQSxTQUNJQyxHQUVBSyxLQUFLcUgsUUFDQTNILE1BQ0dDLElBS1osWUFBQXFDLE9BQUEsU0FDSUMsRUFDQUMsR0FFQWxDLEtBQUtxSCxRQUNBckYsT0FDR0MsRUFDQUMsSUFHaEIsRUE5REEsR0NGTTBGLEVBQU0sRUFBSWxCLGNBQ2hCa0IsRUFBSUQsTUFFVyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJpbXBvcnQgeyBHcmFwaGljc09iamVjdCB9IGZyb20gJy4vZ3JhcGhpY3Mtb2JqZWN0JztcclxuaW1wb3J0IHsgQm91bmRCb3ggfSBmcm9tICcuL2JvdW5kLWJveCc7XHJcblxyXG5leHBvcnQgZW51bSBDYXJkaW5hbCB7XHJcbiAgICBOT1JUSCxcclxuICAgIE5PUlRIX0VBU1QsXHJcbiAgICBFQVNULFxyXG4gICAgU09VVEhfRUFTVCxcclxuICAgIFNPVVRILFxyXG4gICAgU09VVEhfV0VTVCxcclxuICAgIFdFU1QsXHJcbiAgICBOT1JUSF9XRVNUXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb250cm9sUG9pbnQgXHJcbiAgICBpbXBsZW1lbnRzIEdyYXBoaWNzT2JqZWN0IHtcclxuXHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgSFNJWkU6IG51bWJlciA9IDQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBvd25lcjogQm91bmRCb3gsXHJcbiAgICAgICAgcHJpdmF0ZSBjYXJkaW5hbDogQ2FyZGluYWwgKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcGFpbnQoIFxyXG4gICAgICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEICk6IHZvaWQge1xyXG5cclxuICAgICAgICBjdHguZmlsbFN0eWxlID0gQm91bmRCb3guY29sb3I7XHJcblxyXG4gICAgICAgIGxldCB4ID0gMDtcclxuICAgICAgICBsZXQgeSA9IDA7XHJcblxyXG4gICAgICAgIC8vIFRPRE86IGNvbXBsZXRlIHN3aXRjaFxyXG5cclxuICAgICAgICBzd2l0Y2ggKCB0aGlzLmNhcmRpbmFsICkge1xyXG4gICAgICAgICAgICBjYXNlIENhcmRpbmFsLk5PUlRIOlxyXG4gICAgICAgICAgICAgICAgeCA9IHRoaXMub3duZXIueCArIHRoaXMub3duZXIudyAvIDI7XHJcbiAgICAgICAgICAgICAgICB5ID0gdGhpcy5vd25lci55O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2FyZGluYWwuTk9SVEhfRUFTVDpcclxuICAgICAgICAgICAgICAgIHggPSB0aGlzLm93bmVyLnggKyB0aGlzLm93bmVyLnc7XHJcbiAgICAgICAgICAgICAgICB5ID0gdGhpcy5vd25lci55O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2FyZGluYWwuRUFTVDpcclxuICAgICAgICAgICAgICAgIHggPSB0aGlzLm93bmVyLnggKyB0aGlzLm93bmVyLnc7XHJcbiAgICAgICAgICAgICAgICB5ID0gdGhpcy5vd25lci55ICsgdGhpcy5vd25lci5oLzI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDYXJkaW5hbC5TT1VUSF9FQVNUOlxyXG4gICAgICAgICAgICAgICAgeCA9IHRoaXMub3duZXIueCArIHRoaXMub3duZXIudztcclxuICAgICAgICAgICAgICAgIHkgPSB0aGlzLm93bmVyLnkgKyB0aGlzLm93bmVyLmg7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDYXJkaW5hbC5TT1VUSDpcclxuICAgICAgICAgICAgICAgIHggPSB0aGlzLm93bmVyLnggKyB0aGlzLm93bmVyLncgLyAyO1xyXG4gICAgICAgICAgICAgICAgeSA9IHRoaXMub3duZXIueSArIHRoaXMub3duZXIuaDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENhcmRpbmFsLlNPVVRIX1dFU1Q6XHJcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5vd25lci54O1xyXG4gICAgICAgICAgICAgICAgeSA9IHRoaXMub3duZXIueSArIHRoaXMub3duZXIuaDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENhcmRpbmFsLldFU1Q6XHJcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5vd25lci54O1xyXG4gICAgICAgICAgICAgICAgeSA9IHRoaXMub3duZXIueSArIHRoaXMub3duZXIuaC8yO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2FyZGluYWwuTk9SVEhfV0VTVDpcclxuICAgICAgICAgICAgICAgIHggPSB0aGlzLm93bmVyLng7XHJcbiAgICAgICAgICAgICAgICB5ID0gdGhpcy5vd25lci55O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjdHguZmlsbFJlY3QoIFxyXG4gICAgICAgICAgICB4IC0gQ29udHJvbFBvaW50LkhTSVpFLCB5IC0gQ29udHJvbFBvaW50LkhTSVpFLCBcclxuICAgICAgICAgICAgMiAqIENvbnRyb2xQb2ludC5IU0laRSwgMiAqIENvbnRyb2xQb2ludC5IU0laRSBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBpbnRlcmZhY2UgQ29sb3Ige1xuICAgIHI6IG51bWJlcjtcbiAgICBnOiBudW1iZXI7XG4gICAgYjogbnVtYmVyO1xuICAgIGE6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIENvbG9ySGVscGVyIHtcblxuICAgIHN0YXRpYyBjb2xvckFzU3RyaW5nKFxuICAgICAgICBjb2xvcjogQ29sb3IgKTogc3RyaW5nIHtcblxuICAgICAgICByZXR1cm4gJ3JnYmEoJ1xuICAgICAgICAgICAgKyBjb2xvci5yXG4gICAgICAgICAgICArICcsJ1xuICAgICAgICAgICAgKyBjb2xvci5nXG4gICAgICAgICAgICArICcsJ1xuICAgICAgICAgICAgKyBjb2xvci5iXG4gICAgICAgICAgICArICcsJ1xuICAgICAgICAgICAgKyAoY29sb3IuYSAvIDI1NSlcbiAgICAgICAgICAgICsgJyknO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENhcmRpbmFsLCBDb250cm9sUG9pbnQgfSBmcm9tICcuL2NvbnRyb2wtcG9pbnQnO1xyXG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJy4uL3V0aWwvY29sb3ItaGVscGVyJztcclxuaW1wb3J0IHsgR3JhcGhpY3NPYmplY3QgfSBmcm9tICcuL2dyYXBoaWNzLW9iamVjdCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBvc2l0aW9uIHtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEaW1lbnNpb24ge1xyXG4gICAgdzogbnVtYmVyO1xyXG4gICAgaDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQm91bmRCb3ggXHJcbiAgICBpbXBsZW1lbnRzIEdyYXBoaWNzT2JqZWN0IHtcclxuXHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgY29sb3I6IHN0cmluZyA9IENvbG9ySGVscGVyLmNvbG9yQXNTdHJpbmcoe1xyXG4gICAgICAgIHI6IDI4LFxyXG4gICAgICAgIGc6IDExNixcclxuICAgICAgICBiOiAyMzIsXHJcbiAgICAgICAgYTogMjU1LFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gcHVibGljIGludGVyZmFjZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBwb3NpdGlvbjogUG9zaXRpb24sXHJcbiAgICAgICAgcHJpdmF0ZSBzaXplOiBEaW1lbnNpb24gKSB7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29udHJvbFBvaW50cygpO1xyXG4gICAgfVxyXG5cclxuICAgIHBhaW50KCBcclxuICAgICAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCApOiB2b2lkIHtcclxuXHJcbiAgICAgICAgLy8gZHJhdyBib3VuZCBib3hcclxuICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgIGN0eC5zZXRMaW5lRGFzaChbNSwgNV0pO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IEJvdW5kQm94LmNvbG9yO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjdHgucmVjdCggXHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55LCBcclxuICAgICAgICAgICAgdGhpcy5zaXplLncsICAgICB0aGlzLnNpemUuaCBcclxuICAgICAgICApO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG5cclxuICAgICAgICAvLyBkcmF3IGNvbnRyb2wgcG9pbnRzXHJcbiAgICAgICAgdGhpcy5jdHJsUG9pbnRzLmZvckVhY2goIFxyXG4gICAgICAgICAgICAoY3A6IENvbnRyb2xQb2ludCkgPT4gY3AucGFpbnQoIGN0eCApIFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbi54O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB5KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24ueTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpemUudztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpemUuaDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBORVdcclxuICAgIHNlbGVjdChcclxuICAgICAgICBldkRvd246IE1vdXNlRXZlbnQsXHJcbiAgICAgICAgZXZVcD86IE1vdXNlRXZlbnQgKTogYm9vbGVhbiB7XHJcbiAgICAgICAgIFxyXG4gICAgICAgIGlmICggZXZVcCApIHtcclxuICAgICAgICAgICAgLy8gYm91bmQgYm94IHNlbGVjdGlvblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZWQoXHJcbiAgICAgICAgICAgICAgICBldkRvd24sIGV2VXBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHBvaW50IHNlbGVjdGlvblxyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5zKFxyXG4gICAgICAgICAgICBldkRvd25cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIG5vbi1wdWJsaWMgbWVtYmVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgXHJcbiAgICBwcml2YXRlIGN0cmxQb2ludHM6IENvbnRyb2xQb2ludFtdID0gW1xyXG4gICAgXTtcclxuXHJcbiAgICBwcml2YXRlIGFkZENvbnRyb2xQb2ludHMoKTogdm9pZCB7XHJcblxyXG4gICAgICAgIC8vIHRhcmdldCA9IEVTMjAxNytcclxuICAgICAgICAvLyBPYmplY3QudmFsdWVzKFxyXG4gICAgICAgIC8vICAgICBDYXJkaW5hbFxyXG4gICAgICAgIC8vIClcclxuICAgICAgICAvLyAubWFwKCAoY2FyZGluYWw6IENhcmRpbmFsKSA9PlxyXG4gICAgICAgIC8vICAgICB0aGlzLmN0cmxQb2ludHNcclxuICAgICAgICAvLyAgICAgICAgIC5wdXNoKFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIG5ldyBDb250cm9sUG9pbnQoXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHRoaXMsXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGNhcmRpbmFsXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgKVxyXG4gICAgICAgIC8vICAgICAgICAgKVxyXG4gICAgICAgIC8vICk7XHJcblxyXG4gICAgICAgIC8vIHRhcmdldCA9IEVTNVxyXG4gICAgICAgIE9iamVjdC5rZXlzKFxyXG4gICAgICAgICAgICBDYXJkaW5hbFxyXG4gICAgICAgIClcclxuICAgICAgICAubWFwKCAoa2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2FyZGluYWw6IG51bWJlciA9IE51bWJlciggXHJcbiAgICAgICAgICAgICAgICBrZXkgXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoICFpc05hTiggY2FyZGluYWwgKSApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3RybFBvaW50c1xyXG4gICAgICAgICAgICAgICAgICAgIC5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udHJvbFBvaW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29udGFpbnMoXHJcbiAgICAgICAgZXY6IE1vdXNlRXZlbnQgKTogYm9vbGVhbiB7XHJcblxyXG4gICAgICAgIGNvbnN0IGxlZnQ6ICAgbnVtYmVyID0gdGhpcy54O1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0OiAgbnVtYmVyID0gdGhpcy54ICsgdGhpcy53O1xyXG4gICAgICAgIGNvbnN0IHRvcDogICAgbnVtYmVyID0gdGhpcy55O1xyXG4gICAgICAgIGNvbnN0IGJvdHRvbTogbnVtYmVyID0gdGhpcy55ICsgdGhpcy5oO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGxlZnQgPCBldi5jbGllbnRYICYmIGV2LmNsaWVudFggPCByaWdodFxyXG4gICAgICAgICAgICAmJiB0b3AgPCBldi5jbGllbnRZICYmIGV2LmNsaWVudFkgPCBib3R0b207XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVE9ET1xyXG4gICAgcHJpdmF0ZSBjb250YWluZWQoXHJcbiAgICAgICAgZXZEb3duOiBNb3VzZUV2ZW50LFxyXG4gICAgICAgIGV2VXA6IE1vdXNlRXZlbnQgKTogYm9vbGVhbiB7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCb3VuZEJveCB9IGZyb20gJy4vYm91bmQtYm94JztcclxuaW1wb3J0IHsgQ29sb3IsQ29sb3JIZWxwZXIgfSBmcm9tICcuLi91dGlsL2NvbG9yLWhlbHBlcic7XHJcbmltcG9ydCB7IEdyYXBoaWNzT2JqZWN0IH0gZnJvbSAnLi9ncmFwaGljcy1vYmplY3QnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZpZ3VyZSBcclxuICAgIGltcGxlbWVudHMgR3JhcGhpY3NPYmplY3Qge1xyXG5cclxuICAgIC8vIHB1YmxpYyBpbnRlcmZhY2UgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZG9QYWludCggXHJcbiAgICAgICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgKTogdm9pZDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcm90ZWN0ZWQgYmJveDogQm91bmRCb3gsICAgICAgIC8vIE5FV1xyXG4gICAgICAgIHByb3RlY3RlZCBjb2xvcjogQ29sb3IgKSB7XHJcbiAgICB9O1xyXG4gICAgcHJvdGVjdGVkIF9zZWxlY3RlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIGdldCBzZWxlY3RlZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHNldCBzZWxlY3RlZCggczogYm9vbGVhbiApIHtcclxuICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IHM7XHJcblxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgXHJcbiAgICAvLyBUZW1wbGF0ZSBNZXRob2RcclxuICAgIHBhaW50KCBcclxuICAgICAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCApOiB2b2lkIHtcclxuICAgICAgICBcclxuICAgICAgICAvLyAxLiBTYXZlcyBjdXJyZW50IHN0YXRlIG9mIGN0eFxyXG4gICAgICAgIGN0eC5zYXZlKCk7XHJcblxyXG4gICAgICAgIC8vIDIuIFNldHMgQ29sb3JcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBDb2xvckhlbHBlci5jb2xvckFzU3RyaW5nKCAgXHJcbiAgICAgICAgICAgIHRoaXMuY29sb3JcclxuICAgICAgICApOyBcclxuICAgICAgICAvLyAzLiBQYWludHMgZmlndXJlXHJcbiAgICAgICAgdGhpcy5kb1BhaW50KFxyXG4gICAgICAgICAgICBjdHhcclxuICAgICAgICApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIDQuIFJlc3RvcmVzIHN0YXRlIG9mIGN0eFxyXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcblxyXG4gICAgICAgIC8vIDUuIFBhaW50IGJvdW5kaW5nIGJveCAoaWYgYXBsaWNhYmxlKVxyXG4gICAgICAgIGlmICggdGhpcy5zZWxlY3RlZCApIHtcclxuICAgICAgICAgICAgdGhpcy5iYm94XHJcbiAgICAgICAgICAgICAgICAucGFpbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgY3R4XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAvLyBORVdcclxuICAgIHNlbGVjdCggXHJcbiAgICAgICAgZXZEb3duOiBNb3VzZUV2ZW50LFxyXG4gICAgICAgIGV2VXA/OiBNb3VzZUV2ZW50ICk6IHZvaWQge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB0aGlzLmJib3hcclxuICAgICAgICAgICAgLnNlbGVjdCggXHJcbiAgICAgICAgICAgICAgICBldkRvd24sIFxyXG4gICAgICAgICAgICAgICAgZXZVcCBcclxuICAgICAgICAgICAgKTtcclxuICAgIC8vIG5vbi1wdWJsaWMgbWVtYmVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEZpZ3VyZSB9IGZyb20gJy4vZmlndXJlJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBHZW9tZXRyaWNGaWd1cmUgXHJcbiAgICBleHRlbmRzIEZpZ3VyZSB7XHJcbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGRvUGFpbnQoIFxyXG4gICAgICAgICAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCApOiB2b2lkO1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgZG9MaW5lU3R5bGUoXHJcbiAgICAgICAgICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEICk6IHZvaWR7XHJcbiAgICAgICAgICAgICAgICBjdHgubGluZVdpZHRoID0gdGhpcy5saW5ld2lkdGg7XHJcbiAgICAgICAgICAgICAgICBjdHguc2V0TGluZURhc2goW3RoaXMuZGFzaFN0cm9rZSx0aGlzLmRhc2hTcGFjZV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHJvdGVjdGVkIF9saW5ld2lkdGg6IG51bWJlcj00OTtcclxuICAgICAgICBwcm90ZWN0ZWQgX2Rhc2hTdHJva2U6IG51bWJlcjtcclxuICAgICAgICBwcm90ZWN0ZWQgX2Rhc2hTcGFjZTogbnVtYmVyO1xyXG5cclxuICAgICAgICBnZXQgbGluZXdpZHRoKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saW5ld2lkdGhcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldCBsaW5ld2lkdGgobjogbnVtYmVyKXtcclxuICAgICAgICAgICAgdGhpcy5fbGluZXdpZHRoPW5cclxuICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGdldCBkYXNoU3Ryb2tlKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXNoU3Ryb2tlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXQgZGFzaFN0cm9rZShuOiBudW1iZXIpe1xyXG4gICAgICAgICAgICB0aGlzLl9kYXNoU3Ryb2tlPW5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBkYXNoU3BhY2UoKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Rhc2hTcGFjZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0IGRhc2gobjogbnVtYmVyKXtcclxuICAgICAgICAgICAgdGhpcy5fZGFzaFNwYWNlPW5cclxuICAgICAgICB9ICBcclxuXHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG4gICAgIiwiaW1wb3J0IHsgXHJcbiAgICBHZW9tZXRyaWNGaWd1cmUsXHJcbn0gZnJvbSAnLi9nZW9tZXRyaWMtZmlndXJlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUcmlhbmdsZVxyXG4gICAgZXh0ZW5kcyBHZW9tZXRyaWNGaWd1cmUge1xyXG4gICAgICAgIFxyXG4gICAgcHJvdGVjdGVkIGRvUGFpbnQoXHJcbiAgICAgICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgKTogdm9pZCB7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAvL0JvdHRvbSBSaWdodCBDb3JuZXJcclxuICAgICAgICBjdHgubW92ZVRvKFxyXG4gICAgICAgICAgICB0aGlzLmJib3gueCwgXHJcbiAgICAgICAgICAgIHRoaXMuYmJveC55K3RoaXMuYmJveC5oXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvL01pZGRsZSBUb3BcclxuICAgICAgICBjdHgubGluZVRvKFxyXG4gICAgICAgICAgICB0aGlzLmJib3gueCArICh0aGlzLmJib3gudykvMiwgXHJcbiAgICAgICAgICAgIHRoaXMuYmJveC55XHJcbiAgICAgICAgKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5tb3ZlVG8oXHJcbiAgICAgICAgICAgIHRoaXMuYmJveC54ICsgKHRoaXMuYmJveC53KS8yLCBcclxuICAgICAgICAgICAgdGhpcy5iYm94LnlcclxuICAgICAgICApO1xyXG4gICAgICAgIGN0eC5saW5lVG8oXHJcbiAgICAgICAgICAgIHRoaXMuYmJveC54ICsgdGhpcy5iYm94LncsIFxyXG4gICAgICAgICAgICB0aGlzLmJib3gueSArIHRoaXMuYmJveC5oXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgLy9Cb3R0b20gbGluZVxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjdHgubW92ZVRvKFxyXG4gICAgICAgICAgICB0aGlzLmJib3gueCArIHRoaXMuYmJveC53LCBcclxuICAgICAgICAgICAgdGhpcy5iYm94LnkgKyB0aGlzLmJib3guaFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY3R4LmxpbmVUbyhcclxuICAgICAgICAgICAgdGhpcy5iYm94LngsIFxyXG4gICAgICAgICAgICB0aGlzLmJib3gueSt0aGlzLmJib3guaFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbn0iLCJpbXBvcnQgYXBwIGZyb20gJy4uL2luZGV4JztcclxuXHJcbmltcG9ydCB7IFxyXG4gICAgQm91bmRCb3gsIFxyXG59IGZyb20gJy4vYm91bmQtYm94JztcclxuXHJcbmltcG9ydCB7IFxyXG4gICAgRmlndXJlLCBcclxufSBmcm9tICcuL2ZpZ3VyZSc7XHJcblxyXG5pbXBvcnQgeyBcclxuICAgIExpbmUgXHJcbn0gZnJvbSAnLi9saW5lJztcclxuaW1wb3J0IHsgXHJcbiAgICBSZWN0YW5nbGUgXHJcbn0gZnJvbSAnLi9yZWN0YW5nbGUnO1xyXG5pbXBvcnQgeyBcclxuICAgIFRyaWFuZ2xlIFxyXG59IGZyb20gJy4vdHJpYW5nbGUnO1xyXG5pbXBvcnQgeyBcclxuICAgIEVsbGlwc2UgXHJcbn0gZnJvbSAnLi9lbGxpcHNlJztcclxuaW1wb3J0IHsgXHJcbiAgICBUZXh0IFxyXG59IGZyb20gJy4vdGV4dCc7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIERyYXdpbmcge1xyXG4gICAgcHJpdmF0ZSBmaWd1cmVzOiBGaWd1cmVbXSA9IFtcclxuICAgIF07XHJcblxyXG4gICAgcHJpdmF0ZSBtb2RpZmllZCA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBuYW1lOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwb2x5bW9ycGhpc20gaW4gYWN0aW9uXHJcbiAgICBwYWludChcclxuICAgICAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCApOiB2b2lkIHtcclxuXHJcbiAgICAgICAgdGhpcy5maWd1cmVzLmZvckVhY2goIFxyXG4gICAgICAgICAgICAoZjogRmlndXJlKSA9PiBmLnBhaW50KCBjdHggKSBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRPRE86IGRlbGV0ZSB0aGlzXHJcbiAgICBhZGRUZXN0RmlndXJlcygpOiB2b2lkIHsgICAgICAgICAgICAgICBcclxuICAgICAgICBjb25zdCByZWRUcmlhbmdsZTogVHJpYW5nbGUgPSBuZXcgVHJpYW5nbGUoXHJcbiAgICAgICAgICAgIG5ldyBCb3VuZEJveCggeyB4OiAxMDAsIHk6IDEwMCB9LCB7IHc6IDQwMCwgaDogMTAwIH0gKSwgICAvLyBORVdcclxuICAgICAgICAgICAgeyByOiAyNTUsIGc6IDAsIGI6IDAsIGE6IDI1NSB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmZpZ3VyZXNcclxuICAgICAgICAgICAgLnB1c2goXHJcbiAgICAgICAgICAgICAgICByZWRUcmlhbmdsZVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBncmVlblRyaWFuZ2xlOiBUcmlhbmdsZSA9IG5ldyBUcmlhbmdsZShcclxuICAgICAgICAgICAgbmV3IEJvdW5kQm94KCB7IHg6IDEwMCwgeTogMTAwIH0sIHsgdzogNDAwLCBoOiAyMDAgfSApLCAgIC8vIE5FV1xyXG4gICAgICAgICAgICB7IHI6IDAsIGc6IDI1NSwgYjogMCwgYTogMjU1IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuZmlndXJlc1xyXG4gICAgICAgICAgICAucHVzaChcclxuICAgICAgICAgICAgICAgIGdyZWVuVHJpYW5nbGVcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgYmxhY2tUcmlhbmdsZTogVHJpYW5nbGUgPSBuZXcgVHJpYW5nbGUoXHJcbiAgICAgICAgICAgIG5ldyBCb3VuZEJveCggeyB4OiAxMDAsIHk6IDEwMCB9LCB7IHc6IDQwMCwgaDogMzAwIH0gKSwgICAvLyBORVdcclxuICAgICAgICAgICAgeyByOiAwLCBnOiAwLCBiOiAwLCBhOiAyNTUgfVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5maWd1cmVzXHJcbiAgICAgICAgICAgIC5wdXNoKFxyXG4gICAgICAgICAgICAgICAgYmxhY2tUcmlhbmdsZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIHNlbGVjdEFsbCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmZpZ3VyZXMuZm9yRWFjaCggXHJcbiAgICAgICAgICAgIChmOiBGaWd1cmUpID0+IGYuc2VsZWN0ZWQgPSB0cnVlIFxyXG4gICAgICAgICk7XHJcbiAgICB9ICovXHJcblxyXG4gICAgLy8gTkVXXHJcbiAgICBzZWxlY3QoIFxyXG4gICAgICAgIGV2RG93bjogTW91c2VFdmVudCxcclxuICAgICAgICBldlVwPzogTW91c2VFdmVudCApOiB2b2lkIHtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmZpZ3VyZXMuZm9yRWFjaCggXHJcbiAgICAgICAgICAgIChmOiBGaWd1cmUpID0+IGYuc2VsZWN0KCBldkRvd24sIGV2VXAgKSBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBUT0RPOiBzb21ldGhpbmcgc2VsZWN0ZWQ/XHJcbiAgICAgICAgYXBwLnJlcGFpbnQoKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgYWJzdHJhY3QgY2xhc3MgVG9vbCB7XG4gICAgXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHByb2Nlc3NNb3VzZVVwKCk6IHZvaWQ7XG5cbiAgICBwcm90ZWN0ZWQgZXZEb3duOiBNb3VzZUV2ZW50O1xuICAgIHByb3RlY3RlZCBldlVwOiAgIE1vdXNlRXZlbnQ7XG5cbiAgICBvbk1vdXNlRG93bihcbiAgICAgICAgZXY6IE1vdXNlRXZlbnQgKTogdm9pZCB7XG5cbiAgICAgICAgdGhpcy5ldkRvd24gPSBldjtcbiAgICB9XG5cbiAgICAvLyBUZW1wbGF0ZSBNZXRob2RcbiAgICBvbk1vdXNlVXAoXG4gICAgICAgIGV2OiBNb3VzZUV2ZW50ICk6IHZvaWQge1xuXG4gICAgICAgIC8vIDEuIHNhdmUgZXZlbnRcbiAgICAgICAgdGhpcy5ldlVwID0gZXY7XG5cbiAgICAgICAgLy8gMi4gZG8gc29tZXRoaW5nIHcvIHRoZSBldmVudHNcbiAgICAgICAgdGhpcy5wcm9jZXNzTW91c2VVcCgpO1xuICAgIH1cblxuICAgIC8vIG5vbi1wdWJsaWMgbWVtYmVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIHByb3RlY3RlZCBlcXVhbChcbiAgICAgICAgZXYxOiBNb3VzZUV2ZW50LFxuICAgICAgICBldjI6IE1vdXNlRXZlbnQgKTogYm9vbGVhbiB7XG5cbiAgICAgICAgcmV0dXJuIGV2MS5jbGllbnRYID09PSBldjIuY2xpZW50WCBcbiAgICAgICAgICAgICYmIGV2MS5jbGllbnRZID09PSBldjIuY2xpZW50WTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVG9vbCB9IGZyb20gJy4vdG9vbCc7XG5cbmltcG9ydCBhcHAgZnJvbSAnLi4vaW5kZXgnO1xuXG5leHBvcnQgY2xhc3MgU2VsZWN0aW9uVG9vbCBcbiAgICBleHRlbmRzIFRvb2wge1xuXG4gICAgcHJvdGVjdGVkIHByb2Nlc3NNb3VzZVVwKCk6IHZvaWQge1xuICAgICAgICBpZiAoIHRoaXMuZXF1YWwoIHRoaXMuZXZEb3duLCB0aGlzLmV2VXAgKSApIHtcbiAgICAgICAgICAgIC8vIHBvaW50IHNlbGVjdGlvblxuICAgICAgICAgICAgYXBwLnNlbGVjdChcbiAgICAgICAgICAgICAgICB0aGlzLmV2VXBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBib3VuZCBib3ggc2VsZWN0aW9uXG4gICAgICAgICAgICBhcHAuc2VsZWN0KFxuICAgICAgICAgICAgICAgIHRoaXMuZXZEb3duLFxuICAgICAgICAgICAgICAgIHRoaXMuZXZVcFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBcclxuICAgIEFwcCBcclxufSBmcm9tICcuLi9jb250cm9sbGVyL2FwcCc7XHJcblxyXG5leHBvcnQgY2xhc3MgTWFpbldpbmRvdyB7XHJcbiAgICAvLyBwcml2YXRlIG1lbnU6IE1lbnVIZWxwZXI7XHJcbiAgICBwcml2YXRlIGNhbnZhczogQ2FudmFzO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gbmV3IENhbnZhcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5FV1xyXG4gICAgaW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNhbnZhc1xyXG4gICAgICAgICAgICAuaW5pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlcGFpbnQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jYW52YXNcclxuICAgICAgICAgICAgLnJlcGFpbnQoKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gbW9kdWxlIHByaXZhdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmltcG9ydCB7IFRvb2wgfSBmcm9tICcuL3Rvb2wnO1xyXG5pbXBvcnQgeyBTZWxlY3Rpb25Ub29sIH0gZnJvbSAnLi9zZWxlY3Rpb24tdG9vbCc7XHJcblxyXG5jbGFzcyBDYW52YXMge1xyXG5cclxuICAgIHByaXZhdGUgaHRtbEVsZW1lbnQ6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCB8IG51bGw7XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IExJTkVfQ1JFQVRJT046IG51bWJlciA9IDA7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgUkVDVF9DUkVBVElPTjogbnVtYmVyID0gMTtcclxuICAgIHN0YXRpYyByZWFkb25seSBFTExJX0NSRUFUSU9OOiBudW1iZXIgPSAyO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IFRFWFRfQ1JFQVRJT046IG51bWJlciA9IDM7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgU0VMRUNUSU9OOiAgICAgbnVtYmVyID0gNDtcclxuICAgIC8vIE5FVyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgcHJpdmF0ZSB0b29sczogVG9vbFtdID0gW1xyXG4gICAgXTtcclxuICAgIHByaXZhdGUgYWN0aXZlVG9vbDogVG9vbDtcclxuICAgIC8vIE5FVyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIHN0YXRpYyByZWFkb25seSBQQUdFX1dJRFRIOiBudW1iZXIgPSAyMDAwO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IFBBR0VfSEVJR0hUOiBudW1iZXIgPSAyMDAwO1xyXG5cclxuICAgIHN0YXRpYyByZWFkb25seSBHUklEX1NJWkU6IG51bWJlciA9IDEwMDtcclxuICAgIHN0YXRpYyByZWFkb25seSBHUklEX0NPTE9SOiBzdHJpbmcgPSAnI0RERDBERCc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5odG1sRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgICAgICAgICdjYW52YXMnXHJcbiAgICAgICAgKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5XHJcbiAgICAgICAgICAgIC5hcHBlbmRDaGlsZCggXHJcbiAgICAgICAgICAgICAgICB0aGlzLmh0bWxFbGVtZW50IFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmh0bWxFbGVtZW50LndpZHRoID0gQ2FudmFzLlBBR0VfV0lEVEg7XHJcbiAgICAgICAgdGhpcy5odG1sRWxlbWVudC5oZWlnaHQgPSBDYW52YXMuUEFHRV9IRUlHSFQ7XHJcbiAgICAgICAgdGhpcy5odG1sRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI0ZBRkFGQSc7XHJcblxyXG4gICAgICAgIHRoaXMuY3R4ID0gdGhpcy5odG1sRWxlbWVudFxyXG4gICAgICAgICAgICAuZ2V0Q29udGV4dChcclxuICAgICAgICAgICAgICAgICcyZCdcclxuICAgICAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIE5FV1xyXG4gICAgICAgIHRoaXMuYnVpbGRUb29scygpO1xyXG5cclxuICAgICAgICB0aGlzLnNldEFjdGl2ZVRvb2woXHJcbiAgICAgICAgICAgIENhbnZhcy5TRUxFQ1RJT05cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBUT0RPOiByZWdpc3RlciBmb3IgbW91c2UgZXZlbnRzXHJcbiAgICAgICAgLy8gZG93biwgdXAsIG1vdmUsIGRyYWcsIGRvdWJsZWNsaWNrXHJcbiAgICAgICAgLy8gZW50ZXIsIGV4aXRcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFxyXG4gICAgICAgICAgICAnbW91c2Vkb3duJywgXHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlTW91c2VEb3duXHJcbiAgICAgICAgICAgICAgICAuYmluZChcclxuICAgICAgICAgICAgICAgICAgICB0aGlzXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFxyXG4gICAgICAgICAgICAnbW91c2V1cCcsIFxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZU1vdXNlVXBcclxuICAgICAgICAgICAgICAgIC5iaW5kKFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXNcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEFjdGl2ZVRvb2woIFxyXG4gICAgICAgIHQ6IG51bWJlciApIHtcclxuXHJcbiAgICAgICAgdGhpcy5hY3RpdmVUb29sID0gdGhpcy50b29sc1tcclxuICAgICAgICAgICAgdFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29udGV4dCgpOiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmN0eDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IHdpZHRoKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHRtbEVsZW1lbnQud2lkdGg7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCBoZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5odG1sRWxlbWVudC5oZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmVwYWludCgpOiB2b2lkIHsgICAgICAgICAgIC8vIE5FV1xyXG4gICAgICAgIHRoaXMuZHJhd0dyaWQoXHJcbiAgICAgICAgICAgIHRoaXMuY3R4XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgQXBwLmdldEluc3RhbmNlKClcclxuICAgICAgICAgICAgLnBhaW50KFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jdHhcclxuICAgICAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwcml2YXRlIG1ldGhvZHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgcHJpdmF0ZSBjbGVhcihcclxuICAgICAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCApOiB2b2lkIHtcclxuICAgICAgICBcclxuICAgICAgICBjdHguZmlsbFN0eWxlID0gJyNGQUZBRkEnO1xyXG4gICAgICAgIGN0eC5maWxsUmVjdCggMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRyYXdHcmlkKFxyXG4gICAgICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHwgbnVsbCApOiB2b2lkIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgaWYgKCBjdHggKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoXHJcbiAgICAgICAgICAgICAgICBjdHhcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSAxO1xyXG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBDYW52YXMuR1JJRF9DT0xPUjtcclxuXHJcbiAgICAgICAgICAgIC8vIFRPRE86IHVzZSBkb2N1bWVudCBzaXplXHJcbiAgICAgICAgICAgIGNvbnN0IG51bVZlcnRpY2FsczogbnVtYmVyID0gdGhpcy53aWR0aCAvIENhbnZhcy5HUklEX1NJWkU7XHJcbiAgICAgICAgICAgIGNvbnN0IG51bUhvcml6b250YWxzOiBudW1iZXIgPSB0aGlzLmhlaWdodCAvIENhbnZhcy5HUklEX1NJWkU7XHJcblxyXG4gICAgICAgICAgICAvLyB2ZXJ0aWNhbHNcclxuICAgICAgICAgICAgZm9yICggbGV0IHY6IG51bWJlciA9IDE7IHYgPCBudW1WZXJ0aWNhbHM7IHYrKyApIHtcclxuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oIFxyXG4gICAgICAgICAgICAgICAgICAgIHYgKiBDYW52YXMuR1JJRF9TSVpFLCBcclxuICAgICAgICAgICAgICAgICAgICAwIFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oXHJcbiAgICAgICAgICAgICAgICAgICAgdiAqIENhbnZhcy5HUklEX1NJWkUsIFxyXG4gICAgICAgICAgICAgICAgICAgIENhbnZhcy5QQUdFX0hFSUdIVCBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGhvcml6b250YWxzXHJcbiAgICAgICAgICAgIGZvciAoIGxldCBoOiBudW1iZXIgPSAxOyBoIDwgbnVtSG9yaXpvbnRhbHM7IGgrKyApIHtcclxuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oIFxyXG4gICAgICAgICAgICAgICAgICAgIDAsIFxyXG4gICAgICAgICAgICAgICAgICAgIGggKiBDYW52YXMuR1JJRF9TSVpFIFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oXHJcbiAgICAgICAgICAgICAgICAgICAgQ2FudmFzLlBBR0VfV0lEVEgsIFxyXG4gICAgICAgICAgICAgICAgICAgIGggKiBDYW52YXMuR1JJRF9TSVpFIFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBORVcgIC8vIFRPRE86IGFkZCByZW1haW5pbmcgdG9vbHNcclxuICAgIHByaXZhdGUgYnVpbGRUb29scygpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgLy8gdGhpcy50b29sc1sgQ2FudmFzLkxJTkVfQ1JFQVRJT04gXSA9IG5ldyBMaW5lQ3JlYXRpb25Ub29sKCk7XHJcbiAgICAgICAgLy8gdGhpcy50b29sc1sgQ2FudmFzLlJFQ1RfQ1JFQVRJT04gXSA9IG5ldyBSZWN0Q3JlYXRpb25Ub29sKCk7XHJcbiAgICAgICAgLy8gdGhpcy50b29sc1sgQ2FudmFzLkVMTElfQ1JFQVRJT04gXSA9IG5ldyBFbGxpQ3JlYXRpb25Ub29sKCk7XHJcbiAgICAgICAgLy8gdGhpcy50b29sc1sgQ2FudmFzLlRFWFRfQ1JFQVRJT04gXSA9IG5ldyBUZXh0Q3JlYXRpb25Ub29sKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy50b29sc1sgQ2FudmFzLlNFTEVDVElPTiBdID0gbmV3IFNlbGVjdGlvblRvb2woKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdGF0ZSBQYXR0ZXJuXHJcbiAgICBwcml2YXRlIGhhbmRsZU1vdXNlRG93bihcclxuICAgICAgICBldjogTW91c2VFdmVudCApOiB2b2lkIHtcclxuXHJcbiAgICAgICAgdGhpcy5hY3RpdmVUb29sXHJcbiAgICAgICAgICAgIC5vbk1vdXNlRG93bihcclxuICAgICAgICAgICAgICAgIGV2XHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RhdGUgUGF0dGVyblxyXG4gICAgcHJpdmF0ZSBoYW5kbGVNb3VzZVVwKFxyXG4gICAgICAgIGV2OiBNb3VzZUV2ZW50ICk6IHZvaWQge1xyXG5cclxuICAgICAgICB0aGlzLmFjdGl2ZVRvb2xcclxuICAgICAgICAgICAgLm9uTW91c2VVcChcclxuICAgICAgICAgICAgICAgIGV2XHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRHJhd2luZyB9IGZyb20gJy4uL21vZGVsL2RyYXdpbmcnO1xyXG5pbXBvcnQgeyBNYWluV2luZG93IH0gZnJvbSAnLi4vdmlldy9tYWluLXdpbmRvdyc7XHJcblxyXG4vLyBTaW5nbGV0b24gPT4gSW1tdXRhYmxlXHJcbmV4cG9ydCBjbGFzcyBBcHAge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEFwcDtcclxuXHJcbiAgICBwcml2YXRlIGRyYXdpbmc6IERyYXdpbmc7XHJcbiAgICBwcml2YXRlIG1haW5XaW5kb3c6IE1haW5XaW5kb3c7XHJcbiAgICBcclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5kcmF3aW5nID0gbmV3IERyYXdpbmcoKTtcclxuICAgICAgICB0aGlzLm1haW5XaW5kb3cgPSBuZXcgTWFpbldpbmRvdygpO1xyXG5cclxuICAgICAgICBkb2N1bWVudC50aXRsZSA9ICdHcmFwaGljcyBFZGl0b3IgdjAuNic7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbGF6eSBpbml0aWFsaXphdGlvbiAocHJlZmVycmVkKVxyXG4gICAgc3RhdGljIGdldEluc3RhbmNlKCk6IEFwcCB7XHJcbiAgICAgICAgaWYgKCBBcHAuaW5zdGFuY2UgKSB7XHJcbiAgICAgICAgICAgIC8vIE5PT1BcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIEFwcC5pbnN0YW5jZSA9IG5ldyBBcHAoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBBcHAuaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcnVuKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZHJhd2luZyAgICAgICAgICAgIC8vIFRPRE86IHJlbW92ZVxyXG4gICAgICAgICAgICAuYWRkVGVzdEZpZ3VyZXMoKTtcclxuXHJcbiAgICAgICAgdGhpcy5tYWluV2luZG93XHJcbiAgICAgICAgICAgIC5pbml0KCk7XHJcblxyXG4gICAgICAgIHRoaXMucmVwYWludCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGZyb20gbW9kZWwgdG8gdmlldyBcclxuICAgIHJlcGFpbnQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5tYWluV2luZG93XHJcbiAgICAgICAgICAgIC5yZXBhaW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZnJvbSB2aWV3IHRvIG1vZGVsXHJcbiAgICBwYWludChcclxuICAgICAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCApOiB2b2lkIHtcclxuXHJcbiAgICAgICAgdGhpcy5kcmF3aW5nXHJcbiAgICAgICAgICAgIC5wYWludChcclxuICAgICAgICAgICAgICAgIGN0eFxyXG4gICAgICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5FV1xyXG4gICAgc2VsZWN0KCBcclxuICAgICAgICBldkRvd246IE1vdXNlRXZlbnQsXHJcbiAgICAgICAgZXZVcD86IE1vdXNlRXZlbnQgKTogdm9pZCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5kcmF3aW5nXHJcbiAgICAgICAgICAgIC5zZWxlY3QoXHJcbiAgICAgICAgICAgICAgICBldkRvd24sXHJcbiAgICAgICAgICAgICAgICBldlVwXHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQXBwIH0gZnJvbSAnLi9jb250cm9sbGVyL2FwcCc7XHJcblxyXG5jb25zdCBhcHAgPSBBcHAuZ2V0SW5zdGFuY2UoKTtcclxuYXBwLnJ1bigpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXBwO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9