!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var i;n.r(e),function(t){t[t.NORTH=0]="NORTH",t[t.NORTH_EAST=1]="NORTH_EAST",t[t.EAST=2]="EAST",t[t.SOUTH_EAST=3]="SOUTH_EAST",t[t.SOUTH=4]="SOUTH",t[t.SOUTH_WEST=5]="SOUTH_WEST",t[t.WEST=6]="WEST",t[t.NORTH_WEST=7]="NORTH_WEST"}(i||(i={}));var o,r=function(){function t(t,e){this.owner=t,this.cardinal=e}return t.prototype.paint=function(e){e.fillStyle=h.color;var n=0,o=0;switch(this.cardinal){case i.NORTH:n=this.owner.x+this.owner.w/2,o=this.owner.y;break;case i.NORTH_EAST:n=this.owner.x+this.owner.w,o=this.owner.y;break;case i.EAST:n=this.owner.x+this.owner.w,o=this.owner.y+this.owner.h/2;break;case i.SOUTH_EAST:n=this.owner.x+this.owner.w,o=this.owner.y+this.owner.h;break;case i.SOUTH:n=this.owner.x+this.owner.w/2,o=this.owner.y+this.owner.h;break;case i.SOUTH_WEST:n=this.owner.x,o=this.owner.y+this.owner.h;break;case i.WEST:n=this.owner.x,o=this.owner.y+this.owner.h/2;break;case i.NORTH_WEST:n=this.owner.x,o=this.owner.y}e.fillRect(n-t.HSIZE,o-t.HSIZE,2*t.HSIZE,2*t.HSIZE)},t.HSIZE=4,t}(),s=function(){function t(){}return t.colorAsString=function(t){return"rgba("+t.r+","+t.g+","+t.b+","+t.a/255+")"},t}(),h=function(){function t(t,e){this.position=t,this.size=e,this.ctrlPoints=[],this.addControlPoints()}return t.prototype.paint=function(e){e.strokeStyle=t.color,e.beginPath(),e.rect(this.position.x,this.position.y,this.size.w,this.size.h),e.stroke(),this.ctrlPoints.forEach((function(t){return t.paint(e)}))},Object.defineProperty(t.prototype,"x",{get:function(){return this.position.x},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.position.y},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"w",{get:function(){return this.size.w},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"h",{get:function(){return this.size.h},enumerable:!1,configurable:!0}),t.prototype.addControlPoints=function(){var t=this;Object.keys(i).map((function(e){var n=Number(e);isNaN(n)||t.ctrlPoints.push(new r(t,n))}))},t.color=s.colorAsString({r:28,g:116,b:232,a:255}),t}(),c=function(){function t(t,e){this.bbox=t,this.color=e,this._selected=!1}return Object.defineProperty(t.prototype,"selected",{get:function(){return this._selected},set:function(t){this._selected=t},enumerable:!1,configurable:!0}),t.prototype.paint=function(t){this.doPaint(t),this.selected&&this.bbox.paint(t)},t}(),u=(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),a=function(t){function e(e,n){return t.call(this,e,n)||this}return u(e,t),e.prototype.doPaint=function(t){t.strokeStyle=s.colorAsString(this.color),t.beginPath(),t.moveTo(this.bbox.x,this.bbox.y),t.lineTo(this.bbox.x+this.bbox.w,this.bbox.y),t.stroke(),t.beginPath(),t.moveTo(this.bbox.x+this.bbox.w,this.bbox.y),t.lineTo(this.bbox.x+this.bbox.w,this.bbox.y+this.bbox.h),t.stroke(),t.beginPath(),t.moveTo(this.bbox.x+this.bbox.w,this.bbox.y+this.bbox.h),t.lineTo(this.bbox.x,this.bbox.y+this.bbox.h),t.stroke(),t.beginPath(),t.moveTo(this.bbox.x,this.bbox.y+this.bbox.h),t.lineTo(this.bbox.x,this.bbox.y),t.stroke()},e}(c),f=function(){function t(){this.figures=[],this.modified=!1,this.name=null}return t.prototype.paint=function(t){this.figures.forEach((function(e){return e.paint(t)}))},t.prototype.addTestFigures=function(){var t=new a(new h({x:100,y:100},{w:400,h:100}),{r:255,g:0,b:0,a:255});this.figures.push(t);var e=new a(new h({x:100,y:100},{w:400,h:200}),{r:0,g:255,b:0,a:255});this.figures.push(e);var n=new a(new h({x:100,y:100},{w:400,h:300}),{r:0,g:0,b:0,a:255});this.figures.push(n)},t.prototype.selectAll=function(){this.figures.forEach((function(t){return t.selected=!0}))},t}(),l=function(){function t(){this.canvas=new b}return t.prototype.repaint=function(){this.canvas.repaint()},t}(),b=function(){function t(){this.htmlElement=document.createElement("canvas"),document.body.appendChild(this.htmlElement),this.htmlElement.width=t.PAGE_WIDTH,this.htmlElement.height=t.PAGE_HEIGHT,this.htmlElement.style.backgroundColor="#FAFAFA",this.ctx=this.htmlElement.getContext("2d")}return t.prototype.getContext=function(){return this.ctx},Object.defineProperty(t.prototype,"width",{get:function(){return this.htmlElement.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.htmlElement.height},enumerable:!1,configurable:!0}),t.prototype.repaint=function(){this.drawGrid(this.ctx),p.getInstance().paint(this.ctx)},t.prototype.clear=function(t){t.fillStyle="#FAFAFA",t.fillRect(0,0,this.width,this.height)},t.prototype.drawGrid=function(e){if(e){this.clear(e),e.lineWidth=1,e.strokeStyle=t.GRID_COLOR;for(var n=this.width/t.GRID_SIZE,i=this.height/t.GRID_SIZE,o=1;o<n;o++)e.beginPath(),e.moveTo(o*t.GRID_SIZE,0),e.lineTo(o*t.GRID_SIZE,t.PAGE_HEIGHT),e.stroke();for(var r=1;r<i;r++)e.beginPath(),e.moveTo(0,r*t.GRID_SIZE),e.lineTo(t.PAGE_WIDTH,r*t.GRID_SIZE),e.stroke()}},t.PAGE_WIDTH=2e3,t.PAGE_HEIGHT=2e3,t.GRID_SIZE=100,t.GRID_COLOR="#DDD0DD",t}(),p=function(){function t(){this.drawing=new f,this.mainWindow=new l,document.title="Graphics Editor v0.4"}return t.getInstance=function(){return t.instance||(t.instance=new t),t.instance},t.prototype.run=function(){this.drawing.addTestFigures(),this.drawing.selectAll(),this.repaint()},t.prototype.repaint=function(){this.mainWindow.repaint()},t.prototype.paint=function(t){this.drawing.paint(t)},t}(),y=p.getInstance();y.run();e.default=y}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVsL2NvbnRyb2wtcG9pbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvY29sb3ItaGVscGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbC9ib3VuZC1ib3gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVsL2ZpZ3VyZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWwvcmVjdGFuZ2xlLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbC9kcmF3aW5nLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3L21haW4td2luZG93LnRzIiwid2VicGFjazovLy8uL3NyYy9jb250cm9sbGVyL2FwcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJDYXJkaW5hbCIsIm93bmVyIiwiY2FyZGluYWwiLCJwYWludCIsImN0eCIsImZpbGxTdHlsZSIsImNvbG9yIiwieCIsInkiLCJ0aGlzIiwiTk9SVEgiLCJ3IiwiTk9SVEhfRUFTVCIsIkVBU1QiLCJoIiwiU09VVEhfRUFTVCIsIlNPVVRIIiwiU09VVEhfV0VTVCIsIldFU1QiLCJOT1JUSF9XRVNUIiwiZmlsbFJlY3QiLCJDb250cm9sUG9pbnQiLCJIU0laRSIsImNvbG9yQXNTdHJpbmciLCJnIiwiYiIsImEiLCJwb3NpdGlvbiIsInNpemUiLCJjdHJsUG9pbnRzIiwiYWRkQ29udHJvbFBvaW50cyIsInN0cm9rZVN0eWxlIiwiQm91bmRCb3giLCJiZWdpblBhdGgiLCJyZWN0Iiwic3Ryb2tlIiwiZm9yRWFjaCIsImNwIiwia2V5cyIsIm1hcCIsIk51bWJlciIsImlzTmFOIiwicHVzaCIsIkNvbG9ySGVscGVyIiwiYmJveCIsIl9zZWxlY3RlZCIsImRvUGFpbnQiLCJzZWxlY3RlZCIsIm1vdmVUbyIsImxpbmVUbyIsIkZpZ3VyZSIsImZpZ3VyZXMiLCJtb2RpZmllZCIsImYiLCJhZGRUZXN0RmlndXJlcyIsInJlZFJlY3RhbmdsZSIsImdyZWVuUmVjdGFuZ2xlIiwiYmxhY2tSZWN0YW5nbGUiLCJzZWxlY3RBbGwiLCJjYW52YXMiLCJyZXBhaW50IiwiaHRtbEVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJ3aWR0aCIsIkNhbnZhcyIsIlBBR0VfV0lEVEgiLCJoZWlnaHQiLCJQQUdFX0hFSUdIVCIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiZ2V0Q29udGV4dCIsImRyYXdHcmlkIiwiZ2V0SW5zdGFuY2UiLCJjbGVhciIsImxpbmVXaWR0aCIsIkdSSURfQ09MT1IiLCJudW1WZXJ0aWNhbHMiLCJHUklEX1NJWkUiLCJudW1Ib3Jpem9udGFscyIsInYiLCJkcmF3aW5nIiwibWFpbldpbmRvdyIsIk1haW5XaW5kb3ciLCJ0aXRsZSIsIkFwcCIsImluc3RhbmNlIiwicnVuIiwiYXBwIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElB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QUdMN0MsS0FBSzBFLFFBQ0F6QixZQUVMakQsS0FBS21ELFdBSVQsWUFBQUEsUUFBQSxXQUNJbkQsS0FBSzJFLFdBQ0F4QixXQUlULFlBQUF6RCxNQUFBLFNBQ0lDLEdBRUFLLEtBQUswRSxRQUNBaEYsTUFDR0MsSUFHaEIsRUFuREEsR0NGTXNGLEVBQU0sRUFBSWYsY0FDaEJlLEVBQUlELE1BRVciLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiaW1wb3J0IHsgR3JhcGhpY3NPYmplY3QgfSBmcm9tICcuL2dyYXBoaWNzLW9iamVjdCc7XHJcbmltcG9ydCB7IEJvdW5kQm94IH0gZnJvbSAnLi9ib3VuZC1ib3gnO1xyXG5cclxuZXhwb3J0IGVudW0gQ2FyZGluYWwge1xyXG4gICAgTk9SVEgsXHJcbiAgICBOT1JUSF9FQVNULFxyXG4gICAgRUFTVCxcclxuICAgIFNPVVRIX0VBU1QsXHJcbiAgICBTT1VUSCxcclxuICAgIFNPVVRIX1dFU1QsXHJcbiAgICBXRVNULFxyXG4gICAgTk9SVEhfV0VTVFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29udHJvbFBvaW50IFxyXG4gICAgaW1wbGVtZW50cyBHcmFwaGljc09iamVjdCB7XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IEhTSVpFOiBudW1iZXIgPSA0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgb3duZXI6IEJvdW5kQm94LFxyXG4gICAgICAgIHByaXZhdGUgY2FyZGluYWw6IENhcmRpbmFsICkge1xyXG4gICAgfVxyXG5cclxuICAgIHBhaW50KCBcclxuICAgICAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCApOiB2b2lkIHtcclxuXHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IEJvdW5kQm94LmNvbG9yO1xyXG5cclxuICAgICAgICBsZXQgeCA9IDA7XHJcbiAgICAgICAgbGV0IHkgPSAwO1xyXG5cclxuICAgICAgICAvLyBUT0RPOiBjb21wbGV0ZSBzd2l0Y2hcclxuXHJcbiAgICAgICAgc3dpdGNoICggdGhpcy5jYXJkaW5hbCApIHtcclxuICAgICAgICAgICAgY2FzZSBDYXJkaW5hbC5OT1JUSDpcclxuICAgICAgICAgICAgICAgIHggPSB0aGlzLm93bmVyLnggKyB0aGlzLm93bmVyLncgLyAyO1xyXG4gICAgICAgICAgICAgICAgeSA9IHRoaXMub3duZXIueTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENhcmRpbmFsLk5PUlRIX0VBU1Q6XHJcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5vd25lci54ICsgdGhpcy5vd25lci53O1xyXG4gICAgICAgICAgICAgICAgeSA9IHRoaXMub3duZXIueTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENhcmRpbmFsLkVBU1Q6XHJcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5vd25lci54ICsgdGhpcy5vd25lci53O1xyXG4gICAgICAgICAgICAgICAgeSA9IHRoaXMub3duZXIueSArIHRoaXMub3duZXIuaC8yO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2FyZGluYWwuU09VVEhfRUFTVDpcclxuICAgICAgICAgICAgICAgIHggPSB0aGlzLm93bmVyLnggKyB0aGlzLm93bmVyLnc7XHJcbiAgICAgICAgICAgICAgICB5ID0gdGhpcy5vd25lci55ICsgdGhpcy5vd25lci5oO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2FyZGluYWwuU09VVEg6XHJcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5vd25lci54ICsgdGhpcy5vd25lci53IC8gMjtcclxuICAgICAgICAgICAgICAgIHkgPSB0aGlzLm93bmVyLnkgKyB0aGlzLm93bmVyLmg7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDYXJkaW5hbC5TT1VUSF9XRVNUOlxyXG4gICAgICAgICAgICAgICAgeCA9IHRoaXMub3duZXIueDtcclxuICAgICAgICAgICAgICAgIHkgPSB0aGlzLm93bmVyLnkgKyB0aGlzLm93bmVyLmg7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDYXJkaW5hbC5XRVNUOlxyXG4gICAgICAgICAgICAgICAgeCA9IHRoaXMub3duZXIueDtcclxuICAgICAgICAgICAgICAgIHkgPSB0aGlzLm93bmVyLnkgKyB0aGlzLm93bmVyLmgvMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENhcmRpbmFsLk5PUlRIX1dFU1Q6XHJcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5vd25lci54O1xyXG4gICAgICAgICAgICAgICAgeSA9IHRoaXMub3duZXIueTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3R4LmZpbGxSZWN0KCBcclxuICAgICAgICAgICAgeCAtIENvbnRyb2xQb2ludC5IU0laRSwgeSAtIENvbnRyb2xQb2ludC5IU0laRSwgXHJcbiAgICAgICAgICAgIDIgKiBDb250cm9sUG9pbnQuSFNJWkUsIDIgKiBDb250cm9sUG9pbnQuSFNJWkUgXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgaW50ZXJmYWNlIENvbG9yIHtcbiAgICByOiBudW1iZXI7XG4gICAgZzogbnVtYmVyO1xuICAgIGI6IG51bWJlcjtcbiAgICBhOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBDb2xvckhlbHBlciB7XG5cbiAgICBzdGF0aWMgY29sb3JBc1N0cmluZyhcbiAgICAgICAgY29sb3I6IENvbG9yICk6IHN0cmluZyB7XG5cbiAgICAgICAgcmV0dXJuICdyZ2JhKCdcbiAgICAgICAgICAgICsgY29sb3IuclxuICAgICAgICAgICAgKyAnLCdcbiAgICAgICAgICAgICsgY29sb3IuZ1xuICAgICAgICAgICAgKyAnLCdcbiAgICAgICAgICAgICsgY29sb3IuYlxuICAgICAgICAgICAgKyAnLCdcbiAgICAgICAgICAgICsgKGNvbG9yLmEgLyAyNTUpXG4gICAgICAgICAgICArICcpJztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDYXJkaW5hbCwgQ29udHJvbFBvaW50IH0gZnJvbSAnLi9jb250cm9sLXBvaW50JztcclxuaW1wb3J0IHsgQ29sb3JIZWxwZXIgfSBmcm9tICcuLi91dGlsL2NvbG9yLWhlbHBlcic7XHJcbmltcG9ydCB7IEdyYXBoaWNzT2JqZWN0IH0gZnJvbSAnLi9ncmFwaGljcy1vYmplY3QnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQb3NpdGlvbiB7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGltZW5zaW9uIHtcclxuICAgIHc6IG51bWJlcjtcclxuICAgIGg6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJvdW5kQm94IFxyXG4gICAgaW1wbGVtZW50cyBHcmFwaGljc09iamVjdCB7XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IGNvbG9yOiBzdHJpbmcgPSBDb2xvckhlbHBlci5jb2xvckFzU3RyaW5nKHtcclxuICAgICAgICByOiAyOCxcclxuICAgICAgICBnOiAxMTYsXHJcbiAgICAgICAgYjogMjMyLFxyXG4gICAgICAgIGE6IDI1NSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHB1YmxpYyBpbnRlcmZhY2UgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgcG9zaXRpb246IFBvc2l0aW9uLFxyXG4gICAgICAgIHByaXZhdGUgc2l6ZTogRGltZW5zaW9uICkge1xyXG5cclxuICAgICAgICB0aGlzLmFkZENvbnRyb2xQb2ludHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwYWludCggXHJcbiAgICAgICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgKTogdm9pZCB7XHJcblxyXG4gICAgICAgIC8vIGRyYXcgYm91bmQgYm94XHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gQm91bmRCb3guY29sb3I7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5yZWN0KCBcclxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnksIFxyXG4gICAgICAgICAgICB0aGlzLnNpemUudywgICAgIHRoaXMuc2l6ZS5oIFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgICAgICAvLyBkcmF3IGNvbnRyb2wgcG9pbnRzXHJcbiAgICAgICAgdGhpcy5jdHJsUG9pbnRzLmZvckVhY2goIFxyXG4gICAgICAgICAgICAoY3A6IENvbnRyb2xQb2ludCkgPT4gY3AucGFpbnQoIGN0eCApIFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbi54O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB5KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24ueTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpemUudztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpemUuaDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBub24tcHVibGljIG1lbWJlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIFxyXG4gICAgcHJpdmF0ZSBjdHJsUG9pbnRzOiBDb250cm9sUG9pbnRbXSA9IFtcclxuICAgIF07XHJcblxyXG4gICAgcHJpdmF0ZSBhZGRDb250cm9sUG9pbnRzKCk6IHZvaWQge1xyXG5cclxuICAgICAgICAvLyB0YXJnZXQgPSBFUzIwMTcrXHJcbiAgICAgICAgLy8gT2JqZWN0LnZhbHVlcyhcclxuICAgICAgICAvLyAgICAgQ2FyZGluYWxcclxuICAgICAgICAvLyApXHJcbiAgICAgICAgLy8gLm1hcCggKGNhcmRpbmFsOiBDYXJkaW5hbCkgPT5cclxuICAgICAgICAvLyAgICAgdGhpcy5jdHJsUG9pbnRzXHJcbiAgICAgICAgLy8gICAgICAgICAucHVzaChcclxuICAgICAgICAvLyAgICAgICAgICAgICBuZXcgQ29udHJvbFBvaW50KFxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB0aGlzLFxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBjYXJkaW5hbFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIClcclxuICAgICAgICAvLyAgICAgICAgIClcclxuICAgICAgICAvLyApO1xyXG5cclxuICAgICAgICAvLyB0YXJnZXQgPSBFUzVcclxuICAgICAgICBPYmplY3Qua2V5cyhcclxuICAgICAgICAgICAgQ2FyZGluYWxcclxuICAgICAgICApXHJcbiAgICAgICAgLm1hcCggKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhcmRpbmFsOiBudW1iZXIgPSBOdW1iZXIoIFxyXG4gICAgICAgICAgICAgICAga2V5IFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhaXNOYU4oIGNhcmRpbmFsICkgKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN0cmxQb2ludHNcclxuICAgICAgICAgICAgICAgICAgICAucHVzaChcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRyb2xQb2ludChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCb3VuZEJveCB9IGZyb20gJy4vYm91bmQtYm94JztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi91dGlsL2NvbG9yLWhlbHBlcic7XHJcbmltcG9ydCB7IEdyYXBoaWNzT2JqZWN0IH0gZnJvbSAnLi9ncmFwaGljcy1vYmplY3QnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZpZ3VyZSBcclxuICAgIGltcGxlbWVudHMgR3JhcGhpY3NPYmplY3Qge1xyXG5cclxuICAgIC8vIHB1YmxpYyBpbnRlcmZhY2UgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZG9QYWludCggXHJcbiAgICAgICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgKTogdm9pZDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcm90ZWN0ZWQgYmJveDogQm91bmRCb3gsICAgICAgIC8vIE5FV1xyXG4gICAgICAgIHByb3RlY3RlZCBjb2xvcjogQ29sb3IgKSB7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNlbGVjdGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgc2VsZWN0ZWQoIHM6IGJvb2xlYW4gKSB7XHJcbiAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSBzO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRlbXBsYXRlIE1ldGhvZFxyXG4gICAgcGFpbnQoIFxyXG4gICAgICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEICk6IHZvaWQge1xyXG5cclxuICAgICAgICAvLyAxLiBwYWludCBmaWd1cmVcclxuICAgICAgICB0aGlzLmRvUGFpbnQoXHJcbiAgICAgICAgICAgIGN0eFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIDIuIHBhaW50IGJvdW5kaW5nIGJveFxyXG4gICAgICAgIGlmICggdGhpcy5zZWxlY3RlZCApIHtcclxuICAgICAgICAgICAgdGhpcy5iYm94XHJcbiAgICAgICAgICAgICAgICAucGFpbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgY3R4XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBub24tcHVibGljIG1lbWJlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3NlbGVjdGVkOiBib29sZWFuID0gZmFsc2U7XHJcbn1cclxuIiwiaW1wb3J0IHsgXG4gICAgQm91bmRCb3gsIFxufSBmcm9tICcuL2JvdW5kLWJveCc7XG5cbmltcG9ydCB7IFxuICAgIENvbG9yLFxuICAgIENvbG9ySGVscGVyLCBcbn0gZnJvbSAnLi4vdXRpbC9jb2xvci1oZWxwZXInO1xuXG5pbXBvcnQgeyBcbiAgICBGaWd1cmUsXG59IGZyb20gJy4vZmlndXJlJztcblxuZXhwb3J0IGNsYXNzIFJlY3RhbmdsZVxuICAgIGV4dGVuZHMgRmlndXJlIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBiYm94OiBCb3VuZEJveCxcbiAgICAgICAgY29sb3I6IENvbG9yICkge1xuXG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgYmJveCxcbiAgICAgICAgICAgIGNvbG9yXG4gICAgICAgICk7XG4gICAgfVxuICAgICAgICBcbiAgICBwcm90ZWN0ZWQgZG9QYWludChcbiAgICAgICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgKTogdm9pZCB7XG5cbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gQ29sb3JIZWxwZXIuY29sb3JBc1N0cmluZyhcbiAgICAgICAgICAgIHRoaXMuY29sb3JcbiAgICAgICAgKTtcbiAgICAgICAgLy9Ub3AgbGluZVxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oXG4gICAgICAgICAgICB0aGlzLmJib3gueCwgXG4gICAgICAgICAgICB0aGlzLmJib3gueVxuICAgICAgICApO1xuICAgICAgICBjdHgubGluZVRvKFxuICAgICAgICAgICAgdGhpcy5iYm94LnggKyB0aGlzLmJib3gudywgXG4gICAgICAgICAgICB0aGlzLmJib3gueVxuICAgICAgICApO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIC8vUmlnaHQgbGluZVxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oXG4gICAgICAgICAgICB0aGlzLmJib3gueCArIHRoaXMuYmJveC53LCBcbiAgICAgICAgICAgIHRoaXMuYmJveC55XG4gICAgICAgICk7XG4gICAgICAgIGN0eC5saW5lVG8oXG4gICAgICAgICAgICB0aGlzLmJib3gueCArIHRoaXMuYmJveC53LCBcbiAgICAgICAgICAgIHRoaXMuYmJveC55ICsgdGhpcy5iYm94LmhcbiAgICAgICAgKTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAvL0JvdHRvbSBsaW5lXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyhcbiAgICAgICAgICAgIHRoaXMuYmJveC54ICsgdGhpcy5iYm94LncsIFxuICAgICAgICAgICAgdGhpcy5iYm94LnkgKyB0aGlzLmJib3guaFxuICAgICAgICApO1xuICAgICAgICBjdHgubGluZVRvKFxuICAgICAgICAgICAgdGhpcy5iYm94LngsIFxuICAgICAgICAgICAgdGhpcy5iYm94LnkgKyB0aGlzLmJib3guaFxuICAgICAgICApO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIC8vTGVmdCBsaW5lXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyhcbiAgICAgICAgICAgIHRoaXMuYmJveC54LCBcbiAgICAgICAgICAgIHRoaXMuYmJveC55ICsgdGhpcy5iYm94LmhcbiAgICAgICAgKTtcbiAgICAgICAgY3R4LmxpbmVUbyhcbiAgICAgICAgICAgIHRoaXMuYmJveC54LFxuICAgICAgICAgICAgdGhpcy5iYm94LnkgXG4gICAgICAgICk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgXHJcbiAgICBCb3VuZEJveCwgXHJcbn0gZnJvbSAnLi9ib3VuZC1ib3gnO1xyXG5cclxuaW1wb3J0IHsgXHJcbiAgICBGaWd1cmUsIFxyXG59IGZyb20gJy4vZmlndXJlJztcclxuXHJcbmltcG9ydCB7IFxyXG4gICAgTGluZSBcclxufSBmcm9tICcuL2xpbmUnO1xyXG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tICcuL3JlY3RhbmdsZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRHJhd2luZyB7XHJcbiAgICBwcml2YXRlIGZpZ3VyZXM6IEZpZ3VyZVtdID0gW1xyXG4gICAgXTtcclxuXHJcbiAgICBwcml2YXRlIG1vZGlmaWVkID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIG5hbWU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHBvbHltb3JwaGlzbSBpbiBhY3Rpb25cclxuICAgIHBhaW50KFxyXG4gICAgICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEICk6IHZvaWQge1xyXG5cclxuICAgICAgICB0aGlzLmZpZ3VyZXMuZm9yRWFjaCggXHJcbiAgICAgICAgICAgIChmOiBGaWd1cmUpID0+IGYucGFpbnQoIGN0eCApIFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVE9ETzogZGVsZXRlIHRoaXNcclxuICAgIGFkZFRlc3RGaWd1cmVzKCk6IHZvaWQgeyAgICAgICAgICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHJlZFJlY3RhbmdsZTogUmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZShcclxuICAgICAgICAgICAgbmV3IEJvdW5kQm94KCB7IHg6IDEwMCwgeTogMTAwIH0sIHsgdzogNDAwLCBoOiAxMDAgfSApLCAgIC8vIE5FV1xyXG4gICAgICAgICAgICB7IHI6IDI1NSwgZzogMCwgYjogMCwgYTogMjU1IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuZmlndXJlc1xyXG4gICAgICAgICAgICAucHVzaChcclxuICAgICAgICAgICAgICAgIHJlZFJlY3RhbmdsZVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBncmVlblJlY3RhbmdsZTogUmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZShcclxuICAgICAgICAgICAgbmV3IEJvdW5kQm94KCB7IHg6IDEwMCwgeTogMTAwIH0sIHsgdzogNDAwLCBoOiAyMDAgfSApLCAgIC8vIE5FV1xyXG4gICAgICAgICAgICB7IHI6IDAsIGc6IDI1NSwgYjogMCwgYTogMjU1IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuZmlndXJlc1xyXG4gICAgICAgICAgICAucHVzaChcclxuICAgICAgICAgICAgICAgIGdyZWVuUmVjdGFuZ2xlXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJsYWNrUmVjdGFuZ2xlOiBSZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlKFxyXG4gICAgICAgICAgICBuZXcgQm91bmRCb3goIHsgeDogMTAwLCB5OiAxMDAgfSwgeyB3OiA0MDAsIGg6IDMwMCB9ICksICAgLy8gTkVXXHJcbiAgICAgICAgICAgIHsgcjogMCwgZzogMCwgYjogMCwgYTogMjU1IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuZmlndXJlc1xyXG4gICAgICAgICAgICAucHVzaChcclxuICAgICAgICAgICAgICAgIGJsYWNrUmVjdGFuZ2xlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTkVXXHJcbiAgICBzZWxlY3RBbGwoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5maWd1cmVzLmZvckVhY2goIFxyXG4gICAgICAgICAgICAoZjogRmlndXJlKSA9PiBmLnNlbGVjdGVkID0gdHJ1ZSBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFxyXG4gICAgQXBwIFxyXG59IGZyb20gJy4uL2NvbnRyb2xsZXIvYXBwJztcclxuXHJcbmV4cG9ydCBjbGFzcyBNYWluV2luZG93IHtcclxuICAgIC8vIHByaXZhdGUgbWVudTogTWVudUhlbHBlcjtcclxuICAgIHByaXZhdGUgY2FudmFzOiBDYW52YXM7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBuZXcgQ2FudmFzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVwYWludCgpOiB2b2lkIHsgICAgICAgICAgIC8vIE5FV1xyXG4gICAgICAgIHRoaXMuY2FudmFzXHJcbiAgICAgICAgICAgIC5yZXBhaW50KCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIG1vZHVsZSBwcml2YXRlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5jbGFzcyBDYW52YXMge1xyXG5cclxuICAgIHByaXZhdGUgaHRtbEVsZW1lbnQ6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCB8IG51bGw7XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IFBBR0VfV0lEVEg6IG51bWJlciA9IDIwMDA7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgUEFHRV9IRUlHSFQ6IG51bWJlciA9IDIwMDA7XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IEdSSURfU0laRTogbnVtYmVyID0gMTAwO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IEdSSURfQ09MT1I6IHN0cmluZyA9ICcjREREMEREJztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmh0bWxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcclxuICAgICAgICAgICAgJ2NhbnZhcydcclxuICAgICAgICApO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHlcclxuICAgICAgICAgICAgLmFwcGVuZENoaWxkKCBcclxuICAgICAgICAgICAgICAgIHRoaXMuaHRtbEVsZW1lbnQgXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuaHRtbEVsZW1lbnQud2lkdGggPSBDYW52YXMuUEFHRV9XSURUSDtcclxuICAgICAgICB0aGlzLmh0bWxFbGVtZW50LmhlaWdodCA9IENhbnZhcy5QQUdFX0hFSUdIVDtcclxuICAgICAgICB0aGlzLmh0bWxFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjRkFGQUZBJztcclxuXHJcbiAgICAgICAgdGhpcy5jdHggPSB0aGlzLmh0bWxFbGVtZW50XHJcbiAgICAgICAgICAgIC5nZXRDb250ZXh0KFxyXG4gICAgICAgICAgICAgICAgJzJkJ1xyXG4gICAgICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbnRleHQoKTogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jdHg7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCB3aWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0bWxFbGVtZW50LndpZHRoO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHRtbEVsZW1lbnQuaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHJlcGFpbnQoKTogdm9pZCB7ICAgICAgICAgICAvLyBORVdcclxuICAgICAgICB0aGlzLmRyYXdHcmlkKFxyXG4gICAgICAgICAgICB0aGlzLmN0eFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIEFwcC5nZXRJbnN0YW5jZSgpXHJcbiAgICAgICAgICAgIC5wYWludChcclxuICAgICAgICAgICAgICAgIHRoaXMuY3R4XHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHJpdmF0ZSBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIHByaXZhdGUgY2xlYXIoXHJcbiAgICAgICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgKTogdm9pZCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjRkFGQUZBJztcclxuICAgICAgICBjdHguZmlsbFJlY3QoIDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkcmF3R3JpZChcclxuICAgICAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCB8IG51bGwgKTogdm9pZCB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGlmICggY3R4ICkge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyKFxyXG4gICAgICAgICAgICAgICAgY3R4XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBjdHgubGluZVdpZHRoID0gMTtcclxuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gQ2FudmFzLkdSSURfQ09MT1I7XHJcblxyXG4gICAgICAgICAgICAvLyBUT0RPOiB1c2UgZG9jdW1lbnQgc2l6ZVxyXG4gICAgICAgICAgICBjb25zdCBudW1WZXJ0aWNhbHM6IG51bWJlciA9IHRoaXMud2lkdGggLyBDYW52YXMuR1JJRF9TSVpFO1xyXG4gICAgICAgICAgICBjb25zdCBudW1Ib3Jpem9udGFsczogbnVtYmVyID0gdGhpcy5oZWlnaHQgLyBDYW52YXMuR1JJRF9TSVpFO1xyXG5cclxuICAgICAgICAgICAgLy8gdmVydGljYWxzXHJcbiAgICAgICAgICAgIGZvciAoIGxldCB2OiBudW1iZXIgPSAxOyB2IDwgbnVtVmVydGljYWxzOyB2KysgKSB7XHJcbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICBjdHgubW92ZVRvKCBcclxuICAgICAgICAgICAgICAgICAgICB2ICogQ2FudmFzLkdSSURfU0laRSwgXHJcbiAgICAgICAgICAgICAgICAgICAgMCBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKFxyXG4gICAgICAgICAgICAgICAgICAgIHYgKiBDYW52YXMuR1JJRF9TSVpFLCBcclxuICAgICAgICAgICAgICAgICAgICBDYW52YXMuUEFHRV9IRUlHSFQgXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBob3Jpem9udGFsc1xyXG4gICAgICAgICAgICBmb3IgKCBsZXQgaDogbnVtYmVyID0gMTsgaCA8IG51bUhvcml6b250YWxzOyBoKysgKSB7XHJcbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICBjdHgubW92ZVRvKCBcclxuICAgICAgICAgICAgICAgICAgICAwLCBcclxuICAgICAgICAgICAgICAgICAgICBoICogQ2FudmFzLkdSSURfU0laRSBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKFxyXG4gICAgICAgICAgICAgICAgICAgIENhbnZhcy5QQUdFX1dJRFRILCBcclxuICAgICAgICAgICAgICAgICAgICBoICogQ2FudmFzLkdSSURfU0laRSBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRHJhd2luZyB9IGZyb20gJy4uL21vZGVsL2RyYXdpbmcnO1xyXG5pbXBvcnQgeyBNYWluV2luZG93IH0gZnJvbSAnLi4vdmlldy9tYWluLXdpbmRvdyc7XHJcblxyXG4vLyBTaW5nbGV0b24gPT4gSW1tdXRhYmxlXHJcbmV4cG9ydCBjbGFzcyBBcHAge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEFwcDtcclxuXHJcbiAgICBwcml2YXRlIGRyYXdpbmc6IERyYXdpbmc7XHJcbiAgICBwcml2YXRlIG1haW5XaW5kb3c6IE1haW5XaW5kb3c7XHJcbiAgICBcclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5kcmF3aW5nID0gbmV3IERyYXdpbmcoKTtcclxuICAgICAgICB0aGlzLm1haW5XaW5kb3cgPSBuZXcgTWFpbldpbmRvdygpO1xyXG5cclxuICAgICAgICBkb2N1bWVudC50aXRsZSA9ICdHcmFwaGljcyBFZGl0b3IgdjAuNCc7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbGF6eSBpbml0aWFsaXphdGlvbiAocHJlZmVycmVkKVxyXG4gICAgc3RhdGljIGdldEluc3RhbmNlKCk6IEFwcCB7XHJcbiAgICAgICAgaWYgKCBBcHAuaW5zdGFuY2UgKSB7XHJcbiAgICAgICAgICAgIC8vIE5PT1BcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIEFwcC5pbnN0YW5jZSA9IG5ldyBBcHAoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBBcHAuaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcnVuKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZHJhd2luZyAgICAgICAgICAgIC8vIFRPRE86IHJlbW92ZVxyXG4gICAgICAgICAgICAuYWRkVGVzdEZpZ3VyZXMoKTtcclxuXHJcbiAgICAgICAgLy8gTkVXXHJcbiAgICAgICAgdGhpcy5kcmF3aW5nICAgICAgICAgICAgLy8gVE9ETzogcmVtb3ZlXHJcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZXBhaW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZnJvbSBtb2RlbCB0byB2aWV3IFxyXG4gICAgcmVwYWludCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1haW5XaW5kb3dcclxuICAgICAgICAgICAgLnJlcGFpbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBmcm9tIHZpZXcgdG8gbW9kZWxcclxuICAgIHBhaW50KFxyXG4gICAgICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEICk6IHZvaWQge1xyXG5cclxuICAgICAgICB0aGlzLmRyYXdpbmdcclxuICAgICAgICAgICAgLnBhaW50KFxyXG4gICAgICAgICAgICAgICAgY3R4XHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQXBwIH0gZnJvbSAnLi9jb250cm9sbGVyL2FwcCc7XHJcblxyXG5jb25zdCBhcHAgPSBBcHAuZ2V0SW5zdGFuY2UoKTtcclxuYXBwLnJ1bigpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXBwO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9