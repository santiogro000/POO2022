!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var i;n.r(e),function(t){t[t.NORTH=0]="NORTH",t[t.NORTH_EAST=1]="NORTH_EAST",t[t.EAST=2]="EAST",t[t.SOUTH_EAST=3]="SOUTH_EAST",t[t.SOUTH=4]="SOUTH",t[t.SOUTH_WEST=5]="SOUTH_WEST",t[t.WEST=6]="WEST",t[t.NORTH_WEST=7]="NORTH_WEST"}(i||(i={}));var r,o=function(){function t(t,e){this.owner=t,this.cardinal=e}return t.prototype.paint=function(e){e.fillStyle=c.color;var n=0,r=0;switch(this.cardinal){case i.NORTH:n=this.owner.x+this.owner.w/2,r=this.owner.y;break;case i.NORTH_EAST:n=this.owner.x+this.owner.w,r=this.owner.y;break;case i.EAST:n=this.owner.x+this.owner.w,r=this.owner.y+this.owner.h/2;break;case i.SOUTH_EAST:n=this.owner.x+this.owner.w,r=this.owner.y+this.owner.h;break;case i.SOUTH:n=this.owner.x+this.owner.w/2,r=this.owner.y+this.owner.h;break;case i.SOUTH_WEST:n=this.owner.x,r=this.owner.y+this.owner.h;break;case i.WEST:n=this.owner.x,r=this.owner.y+this.owner.h/2;break;case i.NORTH_WEST:n=this.owner.x,r=this.owner.y}e.fillRect(n-t.HSIZE,r-t.HSIZE,2*t.HSIZE,2*t.HSIZE)},t.HSIZE=4,t}(),s=function(){function t(){}return t.colorAsString=function(t){return"rgba("+t.r+","+t.g+","+t.b+","+t.a/255+")"},t}(),c=function(){function t(t,e){this.position=t,this.size=e,this.ctrlPoints=[],this.addControlPoints()}return t.prototype.paint=function(e){e.strokeStyle=t.color,e.beginPath(),e.rect(this.position.x,this.position.y,this.size.w,this.size.h),e.stroke(),this.ctrlPoints.forEach((function(t){return t.paint(e)}))},Object.defineProperty(t.prototype,"x",{get:function(){return this.position.x},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.position.y},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"w",{get:function(){return this.size.w},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"h",{get:function(){return this.size.h},enumerable:!1,configurable:!0}),t.prototype.addControlPoints=function(){var t=this;Object.keys(i).map((function(e){var n=Number(e);isNaN(n)||t.ctrlPoints.push(new o(t,n))}))},t.color=s.colorAsString({r:28,g:116,b:232,a:255}),t}(),u=function(){function t(t,e){this.bbox=t,this.color=e,this._selected=!1}return Object.defineProperty(t.prototype,"selected",{get:function(){return this._selected},set:function(t){this._selected=t},enumerable:!1,configurable:!0}),t.prototype.paint=function(t){this.doPaint(t),this.selected&&this.bbox.paint(t)},t}(),h=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),a=function(t){function e(e,n){return t.call(this,e,n)||this}return h(e,t),e.prototype.doPaint=function(t){var e=t.measureText("Hello World");t.textBaseline="hanging",t.font="48px serif",e.actualBoundingBoxAscent,t.fillStyle=s.colorAsString(this.color),t.fillText("Hello world sweet world in this October 18th",this.bbox.x,this.bbox.h)},e}(u),l=function(){function t(){this.figures=[],this.modified=!1,this.name=null}return t.prototype.paint=function(t){this.figures.forEach((function(e){return e.paint(t)}))},t.prototype.addTestFigures=function(){var t=new a(new c({x:100,y:100},{w:400,h:100}),{r:255,g:0,b:0,a:255});this.figures.push(t);var e=new a(new c({x:100,y:100},{w:400,h:200}),{r:0,g:255,b:0,a:255});this.figures.push(e);var n=new a(new c({x:100,y:100},{w:400,h:300}),{r:0,g:0,b:0,a:255});this.figures.push(n)},t.prototype.selectAll=function(){this.figures.forEach((function(t){return t.selected=!0}))},t}(),f=function(){function t(){this.canvas=new p}return t.prototype.repaint=function(){this.canvas.repaint()},t}(),p=function(){function t(){this.htmlElement=document.createElement("canvas"),document.body.appendChild(this.htmlElement),this.htmlElement.width=t.PAGE_WIDTH,this.htmlElement.height=t.PAGE_HEIGHT,this.htmlElement.style.backgroundColor="#FAFAFA",this.ctx=this.htmlElement.getContext("2d")}return t.prototype.getContext=function(){return this.ctx},Object.defineProperty(t.prototype,"width",{get:function(){return this.htmlElement.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.htmlElement.height},enumerable:!1,configurable:!0}),t.prototype.repaint=function(){this.drawGrid(this.ctx),d.getInstance().paint(this.ctx)},t.prototype.clear=function(t){t.fillStyle="#FAFAFA",t.fillRect(0,0,this.width,this.height)},t.prototype.drawGrid=function(e){if(e){this.clear(e),e.lineWidth=1,e.strokeStyle=t.GRID_COLOR;for(var n=this.width/t.GRID_SIZE,i=this.height/t.GRID_SIZE,r=1;r<n;r++)e.beginPath(),e.moveTo(r*t.GRID_SIZE,0),e.lineTo(r*t.GRID_SIZE,t.PAGE_HEIGHT),e.stroke();for(var o=1;o<i;o++)e.beginPath(),e.moveTo(0,o*t.GRID_SIZE),e.lineTo(t.PAGE_WIDTH,o*t.GRID_SIZE),e.stroke()}},t.PAGE_WIDTH=2e3,t.PAGE_HEIGHT=2e3,t.GRID_SIZE=100,t.GRID_COLOR="#DDD0DD",t}(),d=function(){function t(){this.drawing=new l,this.mainWindow=new f,document.title="Graphics Editor v0.4"}return t.getInstance=function(){return t.instance||(t.instance=new t),t.instance},t.prototype.run=function(){this.drawing.addTestFigures(),this.drawing.selectAll(),this.repaint()},t.prototype.repaint=function(){this.mainWindow.repaint()},t.prototype.paint=function(t){this.drawing.paint(t)},t}(),y=d.getInstance();y.run();e.default=y}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,